import{_ as p,C as t,c as e,o as E,j as l,ag as k,G as n,w as h,a as i}from"./chunks/framework.BpgFjFSJ.js";const r="/docs/static/image.CTDhzZnq.png",d="/docs/static/image-1.DFhboNCR.png",g="/docs/static/image-2.CVZIh02Z.png",b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"skill/react/ahooks/use-request.md","filePath":"skill/react/ahooks/use-request.md"}'),y={name:"skill/react/ahooks/use-request.md"},c={id:"useretryplugin",tabindex:"-1"};function F(o,s,u,A,D,C){const a=t("font");return E(),e("div",null,[l("blockquote",null,[n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[0]||(s[0]=[i("useRequest")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[1]||(s[1]=[i(" 是一个强大的异步数据管理的 Hooks，React 项目中的网络请求场景使用 ")])),_:1}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[2]||(s[2]=[i("useRequest")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[3]||(s[3]=[i(" 就够了。")])),_:1})]),s[71]||(s[71]=k("",28)),l("p",null,[s[5]||(s[5]=i("这里我们可以看出在组件挂载的时候如果我们的配置中")),s[6]||(s[6]=l("code",null,"manual",-1)),s[7]||(s[7]=i("为")),s[8]||(s[8]=l("code",null,"false",-1)),s[9]||(s[9]=i("时会自动执行一次")),s[10]||(s[10]=l("code",null,"run",-1)),s[11]||(s[11]=i("方法，这样就达到了默认调用的功能，然后在组件卸载的时候会调用")),s[12]||(s[12]=l("code",null,"cancel",-1)),s[13]||(s[13]=i("方法来")),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[4]||(s[4]=[i("取消当前正在进行的请求，到这里")])),_:1}),s[14]||(s[14]=l("code",null,"useRequestImplement.ts",-1)),s[15]||(s[15]=i("的源码我们就也看完了，然后我们去看一下这个")),s[16]||(s[16]=l("code",null,"Fetch",-1)),s[17]||(s[17]=i("类内部到底是如何实现这些")),s[18]||(s[18]=l("code",null,"api",-1)),s[19]||(s[19]=i("的。"))]),s[72]||(s[72]=k("",62)),l("p",null,[s[23]||(s[23]=i("这个插件是")),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[20]||(s[20]=[i("可以延迟")])),_:1}),s[24]||(s[24]=l("code",null,"loading",-1)),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[21]||(s[21]=[i(" 变成 ")])),_:1}),s[25]||(s[25]=l("code",null,"true",-1)),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[22]||(s[22]=[i("的时间，有效防止闪烁，我们可以设置一个")])),_:1}),s[26]||(s[26]=l("code",null,"loadingDelay",-1)),s[27]||(s[27]=i("配置，如果请求在我们配置的时间内响应，那么")),s[28]||(s[28]=l("code",null,"loading",-1)),s[29]||(s[29]=i("不会变为")),s[30]||(s[30]=l("code",null,"true",-1)),s[31]||(s[31]=i("就看不到了")),s[32]||(s[32]=l("code",null,"loading",-1)),s[33]||(s[33]=i("的效果。"))]),s[73]||(s[73]=k("",13)),l("blockquote",null,[n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[34]||(s[34]=[i("useRequest 提供了一个")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[35]||(s[35]=[i("options.ready")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[36]||(s[36]=[i("参数，当其值为")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[37]||(s[37]=[i("false")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[38]||(s[38]=[i("时，请求永远都不会发出。")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[39]||(s[39]=[i("其具体行为如下：")])),_:1}),l("ol",null,[l("li",null,[n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[40]||(s[40]=[i("当")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[41]||(s[41]=[i("manual=false")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[42]||(s[42]=[i("自动请求模式时，每次")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[43]||(s[43]=[i("ready")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[44]||(s[44]=[i("从")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[45]||(s[45]=[i("false")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[46]||(s[46]=[i("变为")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[47]||(s[47]=[i("true")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[48]||(s[48]=[i("时，都会自动发起请求，会带上参数")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[49]||(s[49]=[i("options.defaultParams")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[50]||(s[50]=[i("。")])),_:1})]),l("li",null,[n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[51]||(s[51]=[i("当 ")])),_:1}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[52]||(s[52]=[i("manual=true")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[53]||(s[53]=[i(" 手动请求模式时，只要 ")])),_:1}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[54]||(s[54]=[i("ready=false")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[55]||(s[55]=[i("，则通过 ")])),_:1}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[56]||(s[56]=[i("run/runAsync")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[57]||(s[57]=[i(" 触发的请求都不会执行。")])),_:1})])]),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[58]||(s[58]=[i("—— Ready")])),_:1})]),l("blockquote",null,[n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[59]||(s[59]=[i("useRequest 提供了一个 ")])),_:1}),n(a,{style:{color:"rgb(213, 97, 97)","background-color":"rgb(246, 247, 249)"}},{default:h(()=>s[60]||(s[60]=[i("options.refreshDeps")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[61]||(s[61]=[i(" 参数，当它的值变化后，会重新触发请求。 ")])),_:1}),n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[62]||(s[62]=[i("—— 依赖刷新")])),_:1})]),s[74]||(s[74]=k("",13)),l("blockquote",null,[n(a,{style:{color:"rgba(0, 0, 0, 0.75)"}},{default:h(()=>s[63]||(s[63]=[i("函数劫持，顾名思义，即在一个函数运行之前把它劫持下来，添加我们想要的功能。当这个函数实际运行的时候，它已经不是原本的函数了，而是带上了被我们添加上去的功能。这也是我们常见的钩子函数的原理之一。")])),_:1})]),n(a,{style:{color:"rgba(0, 0, 0, 0.75)"}},{default:h(()=>s[64]||(s[64]=[i("简单的说，函数劫持做了下面的三件事情：")])),_:1}),l("ul",null,[l("li",null,[n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[65]||(s[65]=[i("保存原函数。比如这里保存原函数 fetchInstance.runAsync 为 _originRunAsync。")])),_:1})]),l("li",null,[n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[66]||(s[66]=[i("改写原函数。这里改写原函数 fetchInstance.runAsync，加入我们需要的防抖逻辑。")])),_:1})]),l("li",null,[n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[67]||(s[67]=[i("在改写函数中执行原函数。")])),_:1})])]),s[75]||(s[75]=k("",27)),l("h4",c,[n(a,{style:{color:"rgb(69, 77, 100)"}},{default:h(()=>s[68]||(s[68]=[i("useRetryPlugin")])),_:1}),s[69]||(s[69]=i()),s[70]||(s[70]=l("a",{class:"header-anchor",href:"#useretryplugin","aria-label":'Permalink to "<font style="color:rgb(69, 77, 100);">useRetryPlugin</font>"'},"​",-1))]),s[76]||(s[76]=k("",4))])}const m=p(y,[["render",F]]);export{b as __pageData,m as default};
