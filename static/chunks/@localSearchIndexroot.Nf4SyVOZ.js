const e='{"documentCount":67,"nextId":67,"documentIds":{"0":"/docs/skill/algorithm/binary-search/#二分查找","1":"/docs/skill/algorithm/binary-search/question153#寻找旋转排序数组中的最小值","2":"/docs/skill/algorithm/binary-search/question278#第一个错误的版本","3":"/docs/skill/algorithm/binary-search/question374#猜数字大小","4":"/docs/skill/algorithm/binary-search/question704#二分查找","5":"/docs/skill/algorithm/binary-tree/center#二叉树的中序遍历","6":"/docs/skill/algorithm/binary-tree/#二叉树","7":"/docs/skill/algorithm/double-pointer/#双指针","8":"/docs/skill/algorithm/binary-tree/right#二叉树后序遍历","9":"/docs/skill/algorithm/double-pointer/question1#两数之和","10":"/docs/skill/algorithm/double-pointer/question11#盛最多水的容器","11":"/docs/skill/algorithm/double-pointer/question125#验证回文字符串","12":"/docs/skill/algorithm/double-pointer/question15#三数之和","13":"/docs/skill/algorithm/double-pointer/question209#长度最小的子数组","14":"/docs/skill/algorithm/double-pointer/question283#移动零","15":"/docs/skill/algorithm/double-pointer/question344#反转字符串","16":"/docs/skill/algorithm/double-pointer/question438#找到字符串中所有字母异位词","17":"/docs/skill/algorithm/double-pointer/question876#链表的中间节点","18":"/docs/skill/algorithm/dynamic-programming/#动态规划","19":"/docs/skill/algorithm/dynamic-programming/question198#打家劫舍","20":"/docs/skill/algorithm/dynamic-programming/question213#打家劫舍2","21":"/docs/skill/algorithm/dynamic-programming/question70#爬楼梯","22":"/docs/skill/algorithm/monotonic-stack/question42#接雨水","23":"/docs/skill/algorithm/monotonic-stack/#单调栈","24":"/docs/skill/algorithm/monotonic-stack/question496#下一个更大元素i","25":"/docs/skill/algorithm/monotonic-stack/question503#下一个更大元素ii","26":"/docs/skill/algorithm/monotonic-stack/question84#柱状图中的最大矩形","27":"/docs/skill/algorithm/monotonic-stack/question85#最大矩形","28":"/docs/skill/css/zIndex/#zindex理解","29":"/docs/skill/#技能笔记","30":"/docs/skill/react/ahooks/use-antd-table#源码实现","31":"/docs/skill/react/ahooks/use-antd-table#兼容v3与v4","32":"/docs/skill/react/ahooks/use-antd-table#高级搜索场景","33":"/docs/skill/react/ahooks/use-antd-table#提交、重置表单","34":"/docs/skill/react/ahooks/use-antd-table#表格翻页方法","35":"/docs/skill/react/ahooks/use-antd-table#初始化","36":"/docs/skill/react/ahooks/use-antd-table#ready变化自动提交表单","37":"/docs/skill/react/ahooks/use-antd-table#依赖发生变化发送请求","38":"/docs/skill/react/ahooks/use-memoized-fn#场景","39":"/docs/skill/react/ahooks/use-memoized-fn#实现","40":"/docs/skill/react/ahooks/use-request#场景","41":"/docs/skill/react/ahooks/use-request#源码","42":"/docs/skill/react/ahooks/use-request#userequest-ts","43":"/docs/skill/react/ahooks/use-request#userequestimplement-ts","44":"/docs/skill/react/ahooks/use-request#fetch-ts","45":"/docs/skill/react/ahooks/use-request#属性","46":"/docs/skill/react/ahooks/use-request#构造器","47":"/docs/skill/react/ahooks/use-request#setstate","48":"/docs/skill/react/ahooks/use-request#runpluginhandler","49":"/docs/skill/react/ahooks/use-request#runasync","50":"/docs/skill/react/ahooks/use-request#run","51":"/docs/skill/react/ahooks/use-request#cancel","52":"/docs/skill/react/ahooks/use-request#refresh","53":"/docs/skill/react/ahooks/use-request#refreshasync","54":"/docs/skill/react/ahooks/use-request#mutate","55":"/docs/skill/react/ahooks/use-request#插件","56":"/docs/skill/react/ahooks/use-request#插件的结构-小插件demo","57":"/docs/skill/react/ahooks/use-request#插件源码","58":"/docs/skill/react/ahooks/use-request#useloadingdelayplugin","59":"/docs/skill/react/ahooks/use-request#usepollingplugin","60":"/docs/skill/react/ahooks/use-request#useautorunplugin","61":"/docs/skill/react/ahooks/use-request#userefreshonwindowfocusplugin","62":"/docs/skill/react/ahooks/use-request#usedebounceplugin","63":"/docs/skill/react/ahooks/use-request#usethrottleplugin","64":"/docs/skill/react/ahooks/use-request#usecacheplugin","65":"/docs/skill/react/ahooks/use-request#useretryplugin","66":"/docs/skill/react/ahooks/use-request#总结"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[1,1,37],"1":[1,1,53],"2":[1,1,50],"3":[1,1,48],"4":[1,1,33],"5":[1,1,53],"6":[1,1,6],"7":[1,1,66],"8":[1,1,50],"9":[1,1,58],"10":[1,1,39],"11":[1,1,49],"12":[1,1,66],"13":[1,1,52],"14":[1,1,44],"15":[1,1,34],"16":[1,1,74],"17":[1,1,42],"18":[1,1,44],"19":[1,1,32],"20":[1,1,44],"21":[1,1,48],"22":[1,1,68],"23":[1,1,139],"24":[1,1,50],"25":[1,1,59],"26":[1,1,61],"27":[1,1,94],"28":[1,1,78],"29":[1,1,3],"30":[1,1,1],"31":[1,1,81],"32":[1,1,27],"33":[2,1,51],"34":[1,1,21],"35":[1,1,36],"36":[1,1,31],"37":[1,1,42],"38":[1,1,77],"39":[1,1,82],"40":[1,1,43],"41":[1,1,16],"42":[2,1,35],"43":[2,1,127],"44":[2,1,11],"45":[1,3,34],"46":[1,3,25],"47":[1,3,37],"48":[1,3,75],"49":[1,3,116],"50":[1,3,21],"51":[1,3,23],"52":[1,3,16],"53":[1,3,14],"54":[1,3,33],"55":[1,1,1],"56":[3,1,112],"57":[1,1,1],"58":[1,2,48],"59":[1,2,130],"60":[1,2,78],"61":[1,2,97],"62":[1,2,88],"63":[1,2,67],"64":[1,2,228],"65":[1,2,49],"66":[1,1,8]},"averageFieldLength":[1.0895522388059702,1.4179104477611941,53.07462686567164],"storedFields":{"0":{"title":"二分查找","titles":[]},"1":{"title":"寻找旋转排序数组中的最小值","titles":[]},"2":{"title":"第一个错误的版本","titles":[]},"3":{"title":"猜数字大小","titles":[]},"4":{"title":"二分查找","titles":[]},"5":{"title":"二叉树的中序遍历","titles":[]},"6":{"title":"二叉树","titles":[]},"7":{"title":"双指针","titles":[]},"8":{"title":"二叉树后序遍历","titles":[]},"9":{"title":"两数之和","titles":[]},"10":{"title":"盛最多水的容器","titles":[]},"11":{"title":"验证回文字符串","titles":[]},"12":{"title":"三数之和","titles":[]},"13":{"title":"长度最小的子数组","titles":[]},"14":{"title":"移动零","titles":[]},"15":{"title":"反转字符串","titles":[]},"16":{"title":"找到字符串中所有字母异位词","titles":[]},"17":{"title":"链表的中间节点","titles":[]},"18":{"title":"动态规划","titles":[]},"19":{"title":"打家劫舍","titles":[]},"20":{"title":"打家劫舍2","titles":[]},"21":{"title":"爬楼梯","titles":[]},"22":{"title":"接雨水","titles":[]},"23":{"title":"单调栈","titles":[]},"24":{"title":"下一个更大元素I","titles":[]},"25":{"title":"下一个更大元素II","titles":[]},"26":{"title":"柱状图中的最大矩形","titles":[]},"27":{"title":"最大矩形","titles":[]},"28":{"title":"zIndex理解","titles":[]},"29":{"title":"技能笔记","titles":[]},"30":{"title":"源码实现","titles":[]},"31":{"title":"兼容v3与v4","titles":["源码实现"]},"32":{"title":"高级搜索场景","titles":["源码实现"]},"33":{"title":"提交、重置表单","titles":["源码实现"]},"34":{"title":"表格翻页方法","titles":["源码实现"]},"35":{"title":"初始化","titles":["源码实现"]},"36":{"title":"ready变化自动提交表单","titles":["源码实现"]},"37":{"title":"依赖发生变化发送请求","titles":["源码实现"]},"38":{"title":"场景","titles":[]},"39":{"title":"实现","titles":[]},"40":{"title":"场景","titles":[]},"41":{"title":"源码","titles":[]},"42":{"title":"useRequest.ts","titles":["源码"]},"43":{"title":"useRequestImplement.ts","titles":["源码"]},"44":{"title":"Fetch.ts","titles":["源码"]},"45":{"title":"属性","titles":["源码","Fetch.ts"]},"46":{"title":"构造器","titles":["源码","Fetch.ts"]},"47":{"title":"setState","titles":["源码","Fetch.ts"]},"48":{"title":"runPluginHandler","titles":["源码","Fetch.ts"]},"49":{"title":"runAsync","titles":["源码","Fetch.ts"]},"50":{"title":"run","titles":["源码","Fetch.ts"]},"51":{"title":"cancel","titles":["源码","Fetch.ts"]},"52":{"title":"refresh","titles":["源码","Fetch.ts"]},"53":{"title":"refreshAsync","titles":["源码","Fetch.ts"]},"54":{"title":"mutate","titles":["源码","Fetch.ts"]},"55":{"title":"插件","titles":[]},"56":{"title":"插件的结构&amp;小插件demo","titles":["插件"]},"57":{"title":"插件源码","titles":["插件"]},"58":{"title":"useLoadingDelayPlugin","titles":["插件","插件源码"]},"59":{"title":"usePollingPlugin","titles":["插件","插件源码"]},"60":{"title":"useAutoRunPlugin","titles":["插件","插件源码"]},"61":{"title":"useRefreshOnWindowFocusPlugin","titles":["插件","插件源码"]},"62":{"title":"useDebouncePlugin","titles":["插件","插件源码"]},"63":{"title":"useThrottlePlugin","titles":["插件","插件源码"]},"64":{"title":"useCachePlugin","titles":["插件","插件源码"]},"65":{"title":"useRetryPlugin","titles":["插件","插件源码"]},"66":{"title":"总结","titles":[]}},"dirtCount":0,"index":[["对外暴露相应的执行时机",{"2":{"66":1}}],["对于数组",{"2":{"23":2}}],["总结",{"0":{"66":1}}],["总结起来usememoizedfn的核心功能有两点",{"2":{"39":1}}],["但缓存数据已经过了保鲜期",{"2":{"64":1}}],["但是中间有使用到isdocumentvisible和subscriberevisible两个工具方法用来实现页面不可见时是否要继续轮询的功能",{"2":{"59":1}}],["但是在看到这里的时候我们要思考一个问题",{"2":{"45":1}}],["但是每次都写依赖项的话会增加我们的心智负担",{"2":{"38":1}}],["但是我们需要注意这里的写法使用了",{"2":{"43":1}}],["但是我们又没有将count状态放进usecallback的依赖项里",{"2":{"38":1}}],["但是我们的child组件中根本没有使用count这个状态",{"2":{"38":1}}],["但是无论其",{"2":{"28":1}}],["但是遇见一些情况下会生成一些层叠上下文",{"2":{"28":1}}],["但是呢它的下拉悬浮层却被列表的后一项给覆盖住了",{"2":{"28":1}}],["但是有一点nums1是nums2的子集",{"2":{"24":1}}],["但是这个数组是一个环形数组",{"2":{"25":1}}],["但是这道题目中需要找当前数组nums1中每一位元素在另一个数组nums2中对应的下一个更大元素",{"2":{"24":1}}],["但是这道题目还可以使用双指针来解答",{"2":{"9":1}}],["但是这种情况已经包含在从第二个台阶跨一步上去的场景里了",{"2":{"21":1}}],["但是链表的长度不确定",{"2":{"17":1}}],["但是排序会打乱下标",{"2":{"9":1}}],["正常请求",{"2":{"64":1}}],["捋清楚这一点",{"2":{"64":1}}],["解除订阅关系",{"2":{"64":1}}],["解决的办法是将count放在usecallback的第二个参数里面",{"2":{"38":1}}],["绑定订阅事件",{"2":{"64":1}}],["若有则先将缓存数据返回",{"2":{"64":1}}],["去执行所有的订阅事件",{"2":{"64":1}}],["收集了一套订阅关系",{"2":{"64":1}}],["收集需要监听的事件列表",{"2":{"59":1}}],["返回将事件从列表移除的方法",{"2":{"64":1}}],["还提供了一个清除缓存的方法clearcache",{"2":{"64":1}}],["超过缓存时间的情况删除缓存的数据",{"2":{"64":1}}],["获取缓存数据",{"2":{"64":2}}],["获取缓存数据的方法",{"2":{"64":1}}],["获取缓存的数据",{"2":{"64":1}}],["获取表单信息",{"2":{"32":1}}],["获取表单的字段数据",{"2":{"31":1}}],["触发key的事件",{"2":{"64":1}}],["触发的请求都不会执行",{"2":{"60":1}}],["自己只负责主流程",{"2":{"66":1}}],["自定义读取缓存",{"2":{"64":1}}],["自定义设置缓存的方法",{"2":{"64":1}}],["自动请求模式时",{"2":{"60":1}}],["数据新鲜时间",{"2":{"64":1}}],["数组的值就等于第一行",{"2":{"27":1}}],["数组",{"2":{"22":1,"25":1}}],["缓存策略图解",{"2":{"64":1}}],["缓存数据的回收时间",{"2":{"64":1}}],["缓存的唯一标识",{"2":{"64":1}}],["缓存功能",{"2":{"49":1}}],["取消请求将count设置为0并移除定时器",{"2":{"65":1}}],["取消请求时",{"2":{"63":1}}],["取消请求时取消防抖函数的运行",{"2":{"62":1}}],["取消请求时停止轮询",{"2":{"59":1}}],["取消正在执行的节流功能",{"2":{"63":1}}],["处理节流配置",{"2":{"63":1}}],["处理配置项",{"2":{"62":1}}],["同样也是使用lodash",{"2":{"63":1}}],["同上",{"2":{"27":1}}],["加入我们需要的防抖逻辑",{"2":{"62":1}}],["加号",{"2":{"38":1}}],["改写原函数",{"2":{"62":1}}],["保存本次请求的promise",{"2":{"64":1}}],["保存原函数",{"2":{"62":1}}],["保证方法的内存地址始终不变",{"2":{"39":1}}],["简单的说",{"2":{"62":1}}],["添加我们想要的功能",{"2":{"62":1}}],["顾名思义",{"2":{"62":1}}],["函数劫持做了下面的三件事情",{"2":{"62":1}}],["函数劫持",{"2":{"62":1}}],["防抖插件的实现运用了函数劫持重写了runasync方法",{"2":{"62":1}}],["清楚副作用函数中取消防抖函数的运行",{"2":{"62":1}}],["清除失败次数",{"2":{"59":1}}],["使插件可以在各个生命周期中进行自己的功能逻辑处理",{"2":{"66":1}}],["使其具有节流的功能",{"2":{"63":1}}],["使其具有防抖能力",{"2":{"62":1}}],["使用key作为属性维护一个订阅的事件列表",{"2":{"64":1}}],["使用定时器",{"2":{"58":1}}],["使用最后一次参数调用runasync",{"2":{"53":1}}],["使用最近得到一次参数重新调用run",{"2":{"52":1}}],["使用uselatest获取到的最新的请求函数",{"2":{"43":1,"47":1}}],["使用usememo去缓存的时候依赖项只有自身",{"2":{"39":1}}],["使用单调栈查找nums2中每个元素的下一个更大元素",{"2":{"24":1}}],["使用双指针分别从前后开始遍历可以非常快速的解决这个问题",{"2":{"15":1}}],["使用双指针可以非常容易解决",{"2":{"14":1}}],["使用双指针的思路",{"2":{"9":1}}],["使用两个指针",{"2":{"7":3}}],["834800398",{"2":{"62":1,"63":1}}],["注意因为存入的方法使用limit做了节流",{"2":{"61":1}}],["注意我们的child组件使用了优化性能的高阶memo",{"2":{"38":1}}],["浏览器显示状态改变或聚焦发送请求",{"2":{"61":1}}],["浏览器环境下页面是否可见",{"2":{"59":1}}],["给window对象绑定事件",{"2":{"61":1}}],["给定一个数组和一个滑动窗口的大小",{"2":{"23":1}}],["给定一个数组",{"2":{"23":1}}],["核心代码就在useeffect中",{"2":{"61":1}}],["核心逻辑只有下面这一点",{"2":{"39":1}}],["除了getter和setter之外",{"2":{"64":1}}],["除了在页面mount需要调用之外我们在进行搜索动作的时候同样需要调用",{"2":{"40":1}}],["除此之外我们还可以看到依赖刷新相关还有一个配置refreshdepsaction在官方文档上没有告诉我们",{"2":{"60":1}}],["且ready变为true时自动执行请求",{"2":{"60":1}}],["且这些子问题之间存在重叠",{"2":{"18":1}}],["手动修改data",{"2":{"64":1}}],["手动修改state",{"2":{"54":1}}],["手动请求模式时",{"2":{"60":1}}],["变为",{"2":{"60":1}}],["变成",{"2":{"58":1}}],["时",{"2":{"60":2}}],["参数",{"2":{"60":2}}],["提供了一个",{"2":{"60":2}}],["提交方法",{"2":{"33":1}}],["提交表单逻辑",{"2":{"33":1}}],["提交表单的表单数据",{"2":{"31":1}}],["提交",{"0":{"33":1}}],["页面处于隐藏状态不做操作",{"2":{"59":1}}],["服务端渲染返回true",{"2":{"59":1}}],["中间利用了useupdateeffect来使得轮询配置可以动态修改",{"2":{"59":1}}],["中序遍历",{"2":{"6":1}}],["轮询成功",{"2":{"59":1}}],["轮询失败记录轮询失败次数",{"2":{"59":1}}],["轮询配置关闭后自动停止轮询",{"2":{"59":1}}],["支持动态修改轮询配置",{"2":{"59":1}}],["停止轮询时将这个请求的方法从事件列表中移除",{"2":{"59":1}}],["停止轮询",{"2":{"59":1}}],["延迟设置loading状态",{"2":{"58":1}}],["移除定时器",{"2":{"58":2,"64":1}}],["移除之前的定时器",{"2":{"58":1}}],["移动零",{"0":{"14":1},"2":{"14":1}}],["移动较低一侧的指针",{"2":{"10":1}}],["学习一下其实现方式",{"2":{"56":1}}],["接下来的话我们去看一下userequest的内置插件的源码",{"2":{"56":1}}],["接雨水",{"0":{"22":1},"2":{"22":1}}],["搞明白插件的执行机制更便于我们去看各个插件的实现",{"2":{"56":1}}],["搞清楚这一点就可以很快的使用二分查找找到这个数字",{"2":{"2":1}}],["至此我们就搞明白了userequest的插件机制",{"2":{"56":1}}],["无论成功还是失败",{"2":{"56":1}}],["无需再弹出",{"2":{"23":2}}],["无需弹出",{"2":{"23":3}}],["无需弹出元素",{"2":{"23":1}}],["确切来说还是在发起请求之前",{"2":{"56":1}}],["确定状态之间的转移关系",{"2":{"18":1}}],["确定问题的状态",{"2":{"18":1}}],["确定查找范围",{"2":{"0":2}}],["类型",{"2":{"56":1}}],["生命周期",{"2":{"56":1}}],["现在我们整理一下插件的生命周期有哪些",{"2":{"56":1}}],["现象是这样的",{"2":{"28":1}}],["实参",{"2":{"56":1}}],["实现了pending变量的私有化",{"2":{"61":1}}],["实现了这个插件的核心功能",{"2":{"60":1}}],["实现思路是在每次请求完成之后设置一个",{"2":{"59":1}}],["实现方式完全一致",{"2":{"53":1}}],["实现方式非常简单",{"2":{"51":1}}],["实现",{"0":{"39":1}}],["小插件demo",{"0":{"56":1}}],["小于当前元素",{"2":{"23":3}}],["小于当前元素6",{"2":{"23":2}}],["小于当前元素2",{"2":{"23":1}}],["修改了count之后",{"2":{"51":1}}],["明明上面已经判断过一次了",{"2":{"49":1}}],["会执行订阅事件去更新缓存的数据",{"2":{"64":1}}],["会优先使用我们设置的缓存方法",{"2":{"64":1}}],["会重新触发请求",{"2":{"60":1}}],["会带上参数",{"2":{"60":1}}],["会返回servicepromise",{"2":{"56":1}}],["会给我们打印一条错误日志",{"2":{"50":1}}],["会做一下判断",{"2":{"49":1}}],["会将我们传入的请求方法的执行结果作为请求promise",{"2":{"49":1}}],["等待下一次轮询",{"2":{"59":1}}],["等待我们设置的时间之后重新发送一次请求",{"2":{"59":1}}],["等等请求promise返回结果之后",{"2":{"49":1}}],["等较低的级别",{"2":{"7":1}}],["猜测一下这里应该是缓存相关的插件配置项",{"2":{"49":1}}],["猜数字大小",{"0":{"3":1},"2":{"3":1}}],["与",{"2":{"49":1}}],["之后执行onfinally以及插件的onfinally生命周期",{"2":{"49":1}}],["之后剩下的方法就都是我们使用的api了",{"2":{"49":1}}],["之后会调用subscribe方法",{"2":{"47":1}}],["方法的返回结果组合再返回",{"2":{"48":1}}],["方法",{"2":{"48":1}}],["方便自己回顾",{"2":{"29":1}}],["执行所有需要执行的订阅方法",{"2":{"64":1}}],["执行所有插件的onbefore生命周期",{"2":{"49":1}}],["执行所有插件返回值中对应的生命周期函数",{"2":{"48":1}}],["执行时机",{"2":{"56":1}}],["执行onerror以及插件的onerror生命周期",{"2":{"49":1}}],["执行onerror以及onfinally",{"2":{"49":1}}],["执行userequest的onbefore生命周期",{"2":{"49":1}}],["执行插件的oninit方法",{"2":{"43":1}}],["组件卸载时也需要清空事件数组",{"2":{"61":1}}],["组件卸载阶段取消请求",{"2":{"43":1}}],["组件重新render之后会重新从state中取到对应的属性",{"2":{"47":1}}],["刷新后获取到最新的类状态",{"2":{"47":1}}],["构造器",{"0":{"46":1}}],["请求阶段",{"2":{"64":1}}],["请求前",{"2":{"64":1}}],["请求永远都不会发出",{"2":{"60":1}}],["请求失败后将count加1记录失败次数",{"2":{"65":1}}],["请求失败",{"2":{"56":1}}],["请求成功之后也将",{"2":{"65":1}}],["请求成功阶段",{"2":{"64":1}}],["请求成功",{"2":{"56":1}}],["请求成功执行onsuccess以及onfinally",{"2":{"49":1}}],["请求所创建的fetch实例",{"2":{"56":1}}],["请求异常处理",{"2":{"49":1}}],["请求的次数",{"2":{"45":1}}],["请求配置项",{"2":{"43":1,"47":1}}],["属性",{"0":{"45":1}}],["到现在我们再梳理一下这个插件都做了什么事情",{"2":{"64":1}}],["到目前为止我们就看完了userequest的核心部分源码",{"2":{"56":1}}],["到这里我们就明白了userequest中是如何让普通的类属性达到和react状态一样的效果了",{"2":{"47":1}}],["到这里userequestimplement",{"2":{"43":1}}],["到了最后一位后",{"2":{"1":1}}],["为",{"2":{"62":1}}],["为window对象绑定事件",{"2":{"59":1}}],["为useupdate提供的方法",{"2":{"47":1}}],["为false时",{"2":{"43":1}}],["为0的话需要重置当前位的数字",{"2":{"27":1}}],["暂时先不关注这些插件执行后返回了什么",{"2":{"43":1}}],["插件源码",{"0":{"57":1},"1":{"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1}}],["插件接收两个参数",{"2":{"56":1}}],["插件的结构",{"0":{"56":1}}],["插件",{"0":{"55":1},"1":{"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1}}],["插件执行结果组成的数组",{"2":{"45":1}}],["插件如果有oninit方法那么此方法都需要返回一个对象",{"2":{"43":1}}],["插件中需要使用的初始化状态",{"2":{"43":1,"47":1}}],["看一下里面的逻辑",{"2":{"61":1}}],["看一下这个event都能是什么东西",{"2":{"48":1}}],["看到这里我们其实就具备自己开发插件的功能了",{"2":{"56":1}}],["看过runasync的实现后明白",{"2":{"51":1}}],["看第四个参数就需要详细看一下这一行代码",{"2":{"43":1}}],["看注释",{"2":{"31":1}}],["序号",{"2":{"43":1,"47":1,"56":1}}],["|",{"2":{"41":10,"48":2,"54":3,"64":2}}],["||",{"2":{"5":1,"12":1,"16":3,"31":2,"33":3,"34":1,"35":2,"36":1,"37":1,"40":2,"42":1,"43":3,"52":1,"53":1,"56":1,"59":1,"61":1,"64":3,"65":1}}],["专门用来处理请求这种场景",{"2":{"40":1}}],["效果是一样的",{"2":{"39":1}}],["仅在第一次渲染的时候执行",{"2":{"39":1}}],["源码解读",{"2":{"58":1}}],["源码",{"0":{"41":1},"1":{"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1}}],["源码中的逻辑也很简单",{"2":{"39":1}}],["源码实现",{"0":{"30":1},"1":{"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1}}],["`fnref",{"2":{"39":1}}],["`",{"2":{"39":1,"56":1}}],["`usememoizedfn",{"2":{"39":1}}],["始终能获取到最新的状态",{"2":{"39":1}}],["始终让较低的一侧去往较高的一侧靠近",{"2":{"10":1}}],["然而实际的开发中我们遇到的场景可能比这个demo复杂的多",{"2":{"40":1}}],["然而usecallback并不是特别的好用",{"2":{"38":1}}],["然后继续发送请求",{"2":{"64":1}}],["然后设置订阅关系",{"2":{"64":1}}],["然后看一下subscribefocus",{"2":{"61":1}}],["然后主要还是通过了useupdateeffect",{"2":{"60":1}}],["然后提供了一个方法让我们将请求存入这个数组",{"2":{"59":1}}],["然后执行插件的onmutate生命周期",{"2":{"54":1}}],["然后执行插件的oncancel生命周期",{"2":{"51":1}}],["然后执行自身的onsuccess以及插件的onsuccess生命周期",{"2":{"49":1}}],["然后会把插件中onbefore生命周期返回的状态以及本次请求的参数放入state",{"2":{"49":1}}],["然后会从插件的执行结果之中获取到stopnow",{"2":{"49":1}}],["然后会执行所有插件结果中的onbefore方法",{"2":{"49":1}}],["然后在组件卸载的时候会调用cancel方法来取消当前正在进行的请求",{"2":{"43":1}}],["然后去看控制台会发现child组件也进行了render",{"2":{"38":1}}],["然后去计算这个数组中的最大矩形面积",{"2":{"27":1}}],["然后再看第三行",{"2":{"27":1}}],["然后再看前两行",{"2":{"27":1}}],["然后就是发送请求的过程了",{"2":{"49":1}}],["然后就能使用我们很熟悉的单调栈的解题思想去解这道题了",{"2":{"27":1}}],["然后就可以比较清楚的计算并比较得出结果",{"2":{"26":1}}],["然后我们再看一下插件的初始化逻辑",{"2":{"64":1}}],["然后我们就会使用usecustomrequest请求成功或者异常就都会自动抛出提示了",{"2":{"56":1}}],["然后我们重新封装一下userequest",{"2":{"56":1}}],["然后我们整理一下userequest的设计架构图",{"2":{"54":1}}],["然后我们需要看一下pluginreturn这个类型",{"2":{"48":1}}],["然后我们需要想一想这道题目的状态转移方程",{"2":{"21":1}}],["然后我们回过头想一下创建fetch时第三个参数传入的是什么",{"2":{"47":1}}],["然后我们看一下它的内部干了什么",{"2":{"48":1}}],["然后我们看一下它的入参",{"2":{"48":1}}],["然后我们看一下这个subscribe方法到底是什么",{"2":{"47":1}}],["然后我们看一下fetch类中包含的方法有那些",{"2":{"46":1}}],["然后我们看这里会遍历数组执行每个插件的oninit方法",{"2":{"43":1}}],["然后我们先来看一下它的属性",{"2":{"45":1}}],["然后我们接着往下看userequestimplement",{"2":{"43":1}}],["然后我们还需要注意这一行代码",{"2":{"43":1}}],["然后我们逐一看一下这些参数分别是什么",{"2":{"43":1}}],["然后我们去看一下fetch类的constructor方法",{"2":{"45":1}}],["然后我们去看一下fetchinstance被创建的过程",{"2":{"43":1}}],["然后我们去看一下这个fetch类内部到底是如何实现这些api的",{"2":{"43":1}}],["然后我们去看props",{"2":{"38":1}}],["然后我们仔细看一下会发现",{"2":{"43":1}}],["然后我们打开userequestimplement",{"2":{"43":1}}],["然后我们把上面案例中的usecallback替换成usememoizedfn来看一下",{"2":{"39":1}}],["然后我们把这两个问题的结果分别存在两个数组中",{"2":{"26":1}}],["然后我们来看一下在源码中ahooks是如何实现这两点的",{"2":{"39":1}}],["然后我们计算这个数组中的最大矩形面积为1",{"2":{"27":1}}],["然后计算每个位置的最大面积",{"2":{"26":1}}],["然后第二次遍历去查找第一次没有找到结果的元素即可",{"2":{"25":1}}],["然后通过映射关系找到nums1中每个元素对应的更大元素即可",{"2":{"24":1}}],["然后这道题目就很容易解答了",{"2":{"21":1}}],["然后返回两个问题结果中的较大值即可",{"2":{"20":1}}],["然后将剩余元素都填充为0即可",{"2":{"14":1}}],["然后重复2",{"2":{"13":1}}],["然后保持left指针不变",{"2":{"13":1}}],["然后可以根据三数之和大于0还是小于0来适当调整左右指针最后将结果全部放入一个数组中去",{"2":{"12":1}}],["然后分别重排序后的数组的前后开始遍历",{"2":{"9":1}}],["然后根据情况移动指针",{"2":{"7":1}}],["然后根据比较结果缩小查找范围",{"2":{"0":1}}],["既然onclick方法每次都会被重新声明",{"2":{"38":1}}],["既然我们知道了问题所在",{"2":{"38":1}}],["想要解决这种不必要的render",{"2":{"38":1}}],["按钮",{"2":{"38":1}}],["按照状态转移方程",{"2":{"18":1}}],["场景",{"0":{"38":1,"40":1}}],["依次发送需要发送的请求",{"2":{"61":1}}],["依赖刷新",{"2":{"60":1}}],["依赖项发生变化后自动请求",{"2":{"37":1}}],["依赖发生变化发送请求",{"0":{"37":1}}],["依旧小于当前元素",{"2":{"23":1}}],["表格翻页方法",{"0":{"34":1}}],["表示数组的长度或滑动窗口的大小",{"2":{"23":1}}],["表示数组中元素的个数",{"2":{"0":1}}],["没有绑定表单",{"2":{"33":1}}],["储存订阅事件",{"2":{"64":1}}],["储存订阅事件列表的对象",{"2":{"64":1}}],["储存订阅关系",{"2":{"64":1}}],["储存原本的runasync",{"2":{"63":1}}],["储存原来的runasync函数",{"2":{"62":1}}],["储存所有插件执行结果的数组",{"2":{"43":1}}],["储存持久化函数",{"2":{"39":1}}],["储存表单信息",{"2":{"33":1}}],["储存表单状态",{"2":{"32":1}}],["储存",{"2":{"32":1}}],["用于储存浏览器获焦后需要发送的请求",{"2":{"61":1}}],["用于刷新视图",{"2":{"47":1}}],["用于高级搜索场景",{"2":{"32":1}}],["用于解决具有重叠子问题性质的问题",{"2":{"18":1}}],["高级搜索场景",{"0":{"32":1}}],["恢复表单的数据",{"2":{"31":1}}],["event",{"2":{"48":4}}],["exponential",{"2":{"65":1}}],["export",{"2":{"56":2}}],["expected",{"2":{"39":1}}],["extends",{"2":{"39":1,"42":1,"43":3,"44":1,"48":1}}],["env",{"2":{"39":2}}],["e",{"2":{"33":2,"48":2,"56":2}}],["errormessage",{"2":{"56":2}}],["error",{"2":{"39":1,"43":2,"45":1,"48":2,"49":8,"50":3,"56":5,"59":1}}],["errors",{"2":{"31":3}}],["err",{"2":{"33":2}}],["else",{"2":{"1":1,"2":2,"4":2,"7":1,"9":2,"10":1,"12":2,"13":1,"20":4,"31":1,"54":1,"59":2,"60":1,"64":3,"65":1}}],["校验表单",{"2":{"31":1}}],["keyof",{"2":{"48":1}}],["key",{"2":{"31":8,"64":25}}],["keys",{"2":{"31":3}}],["兼容v3和v4",{"2":{"31":3}}],["兼容v3与v4",{"0":{"31":1}}],["默认使用了map的数据结构",{"2":{"64":1}}],["默认5分钟",{"2":{"64":1}}],["默认的datasource",{"2":{"31":1}}],["默认情况下我们在页面上写的元素是按照正常文档流布局的",{"2":{"28":1}}],["unsubscribe",{"2":{"59":1,"61":1,"64":1}}],["unsubscriberef",{"2":{"59":3,"61":3,"64":5}}],["unshift",{"2":{"8":1}}],["undefined",{"2":{"45":3,"49":5,"54":2,"62":3,"63":2,"64":2}}],["update",{"2":{"43":2,"64":2}}],["utils",{"2":{"41":1}}],["useautomessageplugin",{"2":{"56":3}}],["useautorunplugin",{"0":{"60":1},"2":{"42":1,"60":2}}],["useunmount",{"2":{"43":1,"61":1}}],["useupdate返回的刷新组件的方法",{"2":{"43":1,"47":1}}],["useupdate",{"2":{"43":1}}],["useupdateeffect",{"2":{"32":1,"36":1,"37":1,"59":1,"60":2}}],["usemount",{"2":{"43":1}}],["usememo",{"2":{"39":2,"62":1}}],["usememoizedfn的实现同样是利用了useref的特性去实现的",{"2":{"39":1}}],["usememoizedfn",{"2":{"37":4,"39":1,"43":6}}],["usecustomrequest",{"2":{"56":1}}],["usecreation",{"2":{"43":1}}],["usecacheplugin",{"0":{"64":1},"2":{"42":1,"43":1}}],["usecallback",{"2":{"38":2,"40":1}}],["usecallback就是起到了这么一个作用",{"2":{"38":1}}],["uselatest",{"2":{"43":1}}],["useloadingdelayplugin",{"0":{"58":1},"2":{"42":1,"58":1}}],["usethrottleplugin",{"0":{"63":1},"2":{"42":1,"63":1}}],["usetabledata",{"2":{"40":2}}],["usepollingplugin",{"0":{"59":1},"2":{"42":1,"59":1}}],["usepagination",{"2":{"31":1}}],["usedebounceplugin",{"0":{"62":1},"2":{"42":1,"62":1}}],["useretryplugin",{"0":{"65":1},"2":{"42":1}}],["userequest是ahooks最核心的功能之一",{"2":{"66":1}}],["userequestimplement",{"0":{"43":1},"2":{"41":1,"42":1,"43":3}}],["userequest",{"0":{"42":1},"2":{"41":2,"42":1,"56":2,"60":2}}],["userefreshonwindowfocusplugin",{"0":{"61":1},"2":{"42":1,"61":1}}],["useref",{"2":{"31":2,"36":1,"39":4,"58":1,"59":3,"60":1,"61":1,"62":1,"63":1}}],["useselectoptions",{"2":{"40":2}}],["usestate",{"2":{"31":1,"38":2,"40":2}}],["use",{"2":{"35":1,"64":1}}],["useeffect",{"2":{"35":1,"40":2,"61":1,"62":1,"63":1}}],["技能笔记",{"0":{"29":1}}],["覆盖掉了",{"2":{"28":1}}],["覆盖掉",{"2":{"28":1}}],["是的话会将上一次的state",{"2":{"54":1}}],["是否是antd",{"2":{"31":1}}],["是多少",{"2":{"28":1}}],["是一种常用的算法设计技术",{"2":{"18":1}}],["是一种常见的查找算法",{"2":{"0":1}}],["元素被",{"2":{"28":1}}],["元素所创建的层叠上下文上的",{"2":{"28":1}}],["元素是在",{"2":{"28":1}}],["元素的",{"2":{"28":1}}],["元素自己的值就是高",{"2":{"26":1}}],["比如这里保存原函数",{"2":{"62":1}}],["比如说我们所有的请求如果接口报错了我们想要在异常的时候抛出一个异常提示",{"2":{"56":1}}],["比如说我们要在页面mount后获取一个下拉框的数据",{"2":{"40":1}}],["比如说获取表格数据的请求",{"2":{"40":1}}],["比如初始化表格",{"2":{"40":1}}],["比如",{"2":{"38":2}}],["比如下面这个例子",{"2":{"28":1}}],["比较容易想到的是我们可以以当前元素为中心向两边扩散",{"2":{"26":1}}],["比较中间元素的值和目标元素的值",{"2":{"0":1}}],["比较中间元素",{"2":{"0":1}}],["都会自动发起请求",{"2":{"60":1}}],["都会被其上面的层叠上下文元素所覆盖起来",{"2":{"28":1}}],["都无法脱离其父层叠上下文",{"2":{"28":1}}],["来控制层叠上下文的元素的层级关系",{"2":{"28":1}}],["来确定目标元素可能出现的位置",{"2":{"0":1}}],["所有的api都在fetchinstance这个实例上",{"2":{"43":1}}],["所谓的层叠上下文就可以理解为浏览器上的z轴",{"2":{"28":1}}],["所以只会执行一次",{"2":{"64":1}}],["所以key一样就可以复用",{"2":{"64":1}}],["所以不用担心两个事件同时触发发送两次请求的情况",{"2":{"61":1}}],["所以会先去判断我们的入参是否是一个函数",{"2":{"54":1}}],["所以它的实现就非常简单",{"2":{"52":1}}],["所以使用数组储存事件",{"2":{"59":1}}],["所以使用了run的情况下",{"2":{"50":1}}],["所以使用二分查找的时候取出中间数字的时候存在两种情况",{"2":{"1":1}}],["所以在state",{"2":{"64":1}}],["所以在每次update的时候fnref",{"2":{"39":1}}],["所以在背后就去深入的了解了一下z",{"2":{"28":1}}],["所以就保证了内存地址的唯一",{"2":{"39":1}}],["所以ahooks中就提供了usememoizedfn",{"2":{"38":1}}],["所以引发了这样的问题",{"2":{"38":1}}],["所以进行了一次render",{"2":{"38":1}}],["所以必然是props发生了变化",{"2":{"38":1}}],["所以这里不再过多的赘述",{"2":{"63":1}}],["所以这里使用了一个listeners的数组来储存我们轮询的请求",{"2":{"59":1}}],["所以这里执行的是runasync",{"2":{"53":1}}],["所以这里源码的关键问题就在于fetchinstance这个实例对象是如何被创建的",{"2":{"43":1}}],["所以这里重写了几个方法来同时兼容v3与v4",{"2":{"31":1}}],["所以这种render是没有必要的",{"2":{"38":1}}],["所以",{"2":{"28":1}}],["所以问题的关键是如何将这道题的矩阵转换为我们熟悉的数组",{"2":{"27":1}}],["所以我们要去看一下limit和subscribefocus这两个方法的实现",{"2":{"61":1}}],["所以我们在去看一下这两个方法的实现",{"2":{"59":1}}],["所以我们接下来要去看userequestimplement",{"2":{"42":1}}],["所以我们先来看一下目录结构",{"2":{"41":1}}],["所以我们可能无法很明确的感知到单调栈的强大",{"2":{"23":1}}],["所以我们可以使用插件在请求的过程中去做一些事情",{"2":{"56":1}}],["所以我们可以使用快慢双指针去查询中间节点",{"2":{"17":1}}],["所以我们可以先将数组排序",{"2":{"12":1}}],["所以我们解决这两个子问题",{"2":{"20":1}}],["所以我们如果到一个房间之后所能偷到最多的金额就是当前房间上上一个房间所偷到的最大金额加上当前房间的金额与上一个房间所偷到金额的最大值",{"2":{"19":1}}],["所以我们需要两个map对象",{"2":{"16":1}}],["所以我们应当保持较高的一侧不动",{"2":{"10":1}}],["所以无需考虑有重复元素的情况",{"2":{"1":1}}],["所以可以根据中间值与右侧值比较判断属于那种情况",{"2":{"1":1}}],["所以此时计算范围内的前半段一定比右侧值大",{"2":{"1":1}}],["层叠上下文",{"2":{"28":1}}],["要搞清楚z",{"2":{"28":1}}],["要注意这里的userequest是有第三个参数的",{"2":{"42":1}}],["要注意",{"2":{"27":1}}],["发现事情并不简单",{"2":{"28":1}}],["发现完全没有生效",{"2":{"28":1}}],["于是我眉头一皱",{"2":{"28":1}}],["于是我尝试性的在浏览器里将悬浮层的z",{"2":{"28":1}}],["调用此方法会执行原函数",{"2":{"39":1}}],["调整一下z",{"2":{"28":1}}],["调大还是调小",{"2":{"28":1}}],["列表的每一项最后都有一个按钮",{"2":{"28":1}}],["刚开始就是帮忙负责修复一些历史遗留的issue",{"2":{"28":1}}],["z",{"2":{"28":8}}],["zindex理解",{"0":{"28":1}}],["z|0",{"2":{"11":1}}],["先取消订阅事件",{"2":{"64":1}}],["先将缓存数据作为结果返回",{"2":{"64":1}}],["先将每个元素的下标依次入栈",{"2":{"22":1}}],["先看第一行",{"2":{"27":1}}],["先来看一下计算过程",{"2":{"27":1}}],["重新绑定订阅事件",{"2":{"64":1}}],["重新设置缓存",{"2":{"64":1}}],["重新查询页码固定为第一页",{"2":{"33":1}}],["重写之后的runasync方法里面已经实现了防抖的功能",{"2":{"62":1}}],["重写runasync方法",{"2":{"62":1,"63":1}}],["重置表单并发送请求",{"2":{"33":1}}],["重置表单",{"0":{"33":1}}],["重置栈",{"2":{"26":1}}],["重叠子问题",{"2":{"18":1}}],["柱状图中的最大矩形",{"0":{"26":1},"2":{"26":1,"27":1}}],["有效防止闪烁",{"2":{"58":1}}],["有些情况下我们可能还需要手动进行调用",{"2":{"40":1}}],["有了大致思路就能去写代码了",{"2":{"25":1}}],["有两种方案上去",{"2":{"21":1}}],["结果都不起作用",{"2":{"28":1}}],["结果",{"2":{"25":7}}],["结果数组",{"2":{"23":12}}],["查找过程如下",{"2":{"25":1}}],["那就是fetch这个类并没有继承react",{"2":{"45":1}}],["那就是第一次遍历之后",{"2":{"25":1}}],["那么先将缓存数据返回",{"2":{"64":1}}],["那么清空map",{"2":{"64":1}}],["那么依赖项改变会使用refreshdepsaction来替换请求",{"2":{"60":1}}],["那么会移除定时器",{"2":{"58":1}}],["那么loading不会变为true就看不到了loading的效果",{"2":{"58":1}}],["那么现在我们就大致知道一个插件的代码大致是一个什么样的结构了",{"2":{"56":1}}],["那么它是如何达到和usestate一样的效果的呢",{"2":{"45":1}}],["那么我如果保证这个方法在新声明之后和之前的内存地址一致不就可以解决这种无意义的render了吗",{"2":{"38":1}}],["那么我们再看一下cachesubscribe的实现",{"2":{"64":1}}],["那么我们很容易可以想到我们可以先使用单调栈的方式计算出数组中每一位的下一个更大元素",{"2":{"25":1}}],["那么我们的解题思路就是可以先找出nums2中每个元素后面的一个更大元素",{"2":{"24":1}}],["那么我们有多少种方案上去",{"2":{"21":1}}],["那么我们可以将这个问题转换为两个子问题",{"2":{"20":1}}],["那么onclick方法就会重新被声明",{"2":{"38":1}}],["那么下标为1",{"2":{"25":1}}],["那么就有了解决问题的思路",{"2":{"38":1}}],["那么就可以形成凹槽",{"2":{"22":1}}],["那么就是说我们爬上第三个台阶的方案数量",{"2":{"21":1}}],["那么只能从第一个台阶上跨两步上去或者从第二个台阶上跨一步上去",{"2":{"21":1}}],["那么不存在前面一个版本",{"2":{"2":1}}],["那么此时我们计算范围内最右侧的数字一定小于中间数字",{"2":{"1":1}}],["两者的源码几乎一致",{"2":{"63":1}}],["两次遍历就可以查找到所有元素的对应元素",{"2":{"25":1}}],["两数之和这道题目是很多人梦开始的地方",{"2":{"9":1}}],["两数之和",{"0":{"9":1},"2":{"9":1}}],["特别是某个方法使用的状态特别多的情况下",{"2":{"38":1}}],["特别是在处理大规模数据时效果更加明显",{"2":{"0":1}}],["特殊的地方在于可以循环的搜索下一个更大的数字",{"2":{"25":1}}],["由于没有设置依赖项",{"2":{"64":1}}],["由于我们在页面中可能需要轮询多个请求",{"2":{"59":1}}],["由于上面这个例子比较简单",{"2":{"23":1}}],["由于双指针算法的思路比较简洁",{"2":{"7":1}}],["弹出最后一位",{"2":{"23":1}}],["弹出栈最后一位",{"2":{"23":2}}],["继续弹出",{"2":{"23":1}}],["继续执行步骤",{"2":{"0":1}}],["栈中最后一位对应数组中的元素为",{"2":{"23":1}}],["栈中的元素就具有单调性",{"2":{"23":1}}],["栈",{"2":{"23":10,"25":7}}],["遍历事件列表",{"2":{"61":1}}],["遍历每一行",{"2":{"27":1}}],["遍历结束",{"2":{"23":1}}],["遍历结束后即得到全部结果",{"2":{"12":1}}],["遍历原数组",{"2":{"23":1}}],["再创建一个数组作为栈",{"2":{"23":1}}],["再往后分析就能得出这道题目的状态转移方程为f",{"2":{"21":1}}],["创建一个栈",{"2":{"23":1}}],["j++",{"2":{"23":1}}],["j",{"2":{"23":4}}],["json",{"2":{"40":2,"64":1}}],["jsxconst",{"2":{"38":1}}],["jsxfunction",{"2":{"38":2}}],["js",{"2":{"1":1,"2":1,"3":1,"4":1,"5":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":2,"26":1,"27":1}}],["直接将缓存数据返回",{"2":{"64":1}}],["直接将state",{"2":{"52":1}}],["直接执行了runasync",{"2":{"50":1}}],["直接会将现在的state中的data作为promise的结果返回",{"2":{"49":1}}],["直接取消请求",{"2":{"49":1}}],["直接跳出当前层循环",{"2":{"23":1}}],["直到扩散到比自己小的元素这里",{"2":{"26":1}}],["直到栈顶元素大于等于它",{"2":{"23":1}}],["直到得到最终的目标状态的值",{"2":{"18":1}}],["直到子数组中的和加起来大于目标值为止",{"2":{"13":1}}],["直到找到目标元素或者确认目标元素不存在",{"2":{"0":1}}],["已经是最后一个元素",{"2":{"23":1}}],["大于当前元素",{"2":{"23":3}}],["大于当前元素5",{"2":{"23":1}}],["大于当前元素1",{"2":{"23":1}}],["大于当前元素2",{"2":{"23":2}}],["目标数组",{"2":{"23":4}}],["跳出当前层循环",{"2":{"23":5}}],["放入结果数组",{"2":{"23":4}}],["不会发送请求",{"2":{"64":1}}],["不过官网上并没有提及",{"2":{"42":1}}],["不过依旧可以使用单调栈去解这道题",{"2":{"26":1}}],["不过在解决一些复杂一点的算法题的时候我们就能够感受到它的那种化腐朽为神奇的能力",{"2":{"23":1}}],["不符条件继续向后遍历",{"2":{"23":2}}],["不偷第一个房间",{"2":{"20":1}}],["不偷最后一个房间",{"2":{"20":1}}],["只在页面可不可见状态改变触发",{"2":{"59":1}}],["只看表格可能不太清晰",{"2":{"56":1}}],["只能使用onerror处理异常",{"2":{"50":1}}],["只传分页信息",{"2":{"33":1}}],["只要",{"2":{"60":1}}],["只要明白了转换问题我们会发现这道题我们需要做的就是依次将每行压入数组",{"2":{"27":1}}],["只要两边的元素比自己大那么就可以继续扩散",{"2":{"26":1}}],["只遍历当前元素后的元素",{"2":{"23":6}}],["只有在依赖项改变执行",{"2":{"60":1}}],["只有最新的一次请求会执行",{"2":{"56":1}}],["只有一种方案上去",{"2":{"21":1}}],["只有指针",{"2":{"17":1}}],["下面的层叠上下文中的元素不管",{"2":{"28":1}}],["下标",{"2":{"23":12}}],["下一个更大元素ii",{"0":{"25":1}}],["下一个更大元素i",{"0":{"24":1}}],["下一个更大元素",{"2":{"23":1}}],["下一位会在第一位",{"2":{"1":1}}],["找寻过程如下",{"2":{"23":2}}],["找到每个元素在nums2中对应的下一个更大元素",{"2":{"24":1}}],["找到比自己大的元素然后放入目标数组",{"2":{"23":1}}],["找到字符串中所有字母异位词",{"0":{"16":1},"2":{"16":1}}],["原数组",{"2":{"23":2}}],["针对于每个元素所在的位置向后遍历",{"2":{"23":1}}],["常规解题思路",{"2":{"23":1}}],["举个🌰",{"2":{"23":1}}],["728",{"2":{"39":1}}],["7",{"2":{"23":2}}],["6",{"2":{"23":21}}],["5000",{"2":{"61":1}}],["5",{"2":{"23":45}}],["区间最值",{"2":{"23":1}}],["4400",{"2":{"62":1,"63":1}}],["4",{"2":{"23":7,"27":1,"31":2,"43":1,"47":1}}],["例如",{"2":{"23":2}}],["求出每个滑动窗口的最大值或最小值",{"2":{"23":1}}],["求出每个元素的下一个更大元素",{"2":{"23":1}}],["求解目标",{"2":{"18":1}}],["单调栈解题思路",{"2":{"23":1}}],["单调栈的实现难度较低",{"2":{"23":1}}],["单调栈的时间复杂度通常是",{"2":{"23":1}}],["单调栈的基本思想是维护一个单调递增或单调递减的栈",{"2":{"23":1}}],["单调栈常用于解决以下两类问题",{"2":{"23":1}}],["单调栈是一个栈",{"2":{"23":1}}],["单调栈是一种常用的数据结构",{"2":{"23":1}}],["单调栈",{"0":{"23":1}}],["就会直接返回一个空的promise",{"2":{"51":1}}],["就会无法在方法中获取到最新的状态",{"2":{"38":1}}],["就可以把问题转换为柱状图中的最大矩形这道题目",{"2":{"27":1}}],["就可得出一共能接多少雨水",{"2":{"22":1}}],["就拿这道题的案例来举例子",{"2":{"27":1}}],["就是某个区间的最左侧和最右侧都高于中间值的时候",{"2":{"22":1}}],["就是房子上围绕成一个环的",{"2":{"20":1}}],["否则的话会在请求发送之前设置定时器",{"2":{"58":1}}],["否则的话会直接储存结果",{"2":{"54":1}}],["否则的话会将请求结果存入state",{"2":{"49":1}}],["否则将错误信息放入state",{"2":{"49":1}}],["否则表示只有右侧有凸起",{"2":{"22":1}}],["否则根据比较结果缩小查找范围",{"2":{"0":1}}],["代表当前元素比栈底元素高",{"2":{"22":1}}],["代码如下",{"2":{"4":1}}],["在组件卸载阶段",{"2":{"64":1}}],["在初始化的时候先查看有没有缓存数据",{"2":{"64":1}}],["在初始化逻辑里面使用了cachesubscribe去订阅缓存",{"2":{"64":1}}],["在清除副作用函数中将runasync重新设置回来",{"2":{"63":1}}],["在清除副作用函数中清空事件数组",{"2":{"61":1}}],["在改写函数中执行原函数",{"2":{"62":1}}],["在mount不会执行",{"2":{"60":1}}],["在页面隐藏状态改变的时候会去执行这个事件列表里储存的所有事件",{"2":{"59":1}}],["在每次请求前先取消上一次轮询",{"2":{"59":1}}],["在loadingdelay毫秒之后将loading设置为true",{"2":{"58":1}}],["在手动修改data的时候触发",{"2":{"56":1}}],["在取消请求的时候触发",{"2":{"56":1}}],["在userequest的onfinally之后",{"2":{"56":1}}],["在userequest的onerror之后",{"2":{"56":1}}],["在userequest的onsuccess之后",{"2":{"56":1}}],["在请求完成之后",{"2":{"56":1}}],["在请求异常时触发",{"2":{"56":1}}],["在请求成功后触发",{"2":{"56":1}}],["在请求时触发",{"2":{"56":1}}],["在修改值之后会调用useupdate方法返回的更新组件的方法触发组件render",{"2":{"47":1}}],["在构造方法里这里只是将所有插件的oninit事件中返回的状态放入了state内部",{"2":{"46":1}}],["在第一次看userequestimplement",{"2":{"45":1}}],["在我们开发业务的时候经常会处理请求",{"2":{"40":1}}],["在最近修复的issue的时候遇见了一个非常有意思的css问题",{"2":{"28":1}}],["在入栈前先弹出栈中小于当前元素的元素",{"2":{"23":1}}],["在入栈之前先判断一下栈中最后一位的值是不是小于等于当前元素",{"2":{"22":1}}],["在数组中寻找子数组的最大和等",{"2":{"7":1}}],["很简单",{"2":{"22":1}}],["什么情况下可以接到雨水",{"2":{"22":1}}],["也是使用频率最高的hooks之一",{"2":{"66":1}}],["也就是在这一步我们可以看出每一个插件都是一个函数",{"2":{"43":1}}],["也就是从上到下",{"2":{"28":1}}],["也就是可以下拉的",{"2":{"28":1}}],["也就是第二次遍历需要查找的元素",{"2":{"25":1}}],["也就是我们第二次遍历时要查找的这些元素",{"2":{"25":1}}],["也就是f",{"2":{"21":1}}],["也称折半查找",{"2":{"0":1}}],["爬上第一个台阶的方案数量",{"2":{"21":1}}],["爬上第二个台阶的方案数量",{"2":{"21":1}}],["爬楼梯",{"0":{"21":1}}],["第二个入参rest是一些参数",{"2":{"48":1}}],["第二个就是找到每个元素后面第一个比自己小的元素的下标",{"2":{"26":1}}],["第二个台阶上道第三个台阶都是只有一种方式",{"2":{"21":1}}],["第二次遍历",{"2":{"25":1}}],["第一个入参event是pluginreturn这个类型中的key",{"2":{"48":1}}],["第一个就是找到每个元素前面第一个比自己小的元素的下标",{"2":{"26":1}}],["第一个错误的版本",{"0":{"2":1},"2":{"2":1}}],["第一次遍历",{"2":{"25":1}}],["第一层遍历",{"2":{"23":1}}],["第一种情况",{"2":{"1":1}}],["可能你会说我在第一个台阶上也能分两步上去",{"2":{"21":1}}],["可以复用缓存数据",{"2":{"64":1}}],["可以让我们更方便的管理我们的请求",{"2":{"40":1}}],["可以通过",{"2":{"28":1}}],["可以查看这个在线demo",{"2":{"28":1}}],["可以方便地求出每个元素的下一个更大元素或每个滑动窗口的最大值或最小值",{"2":{"23":1}}],["可以接雨水",{"2":{"22":1}}],["可以将原问题的解与子问题的解联系起来",{"2":{"18":1}}],["可以使用正则去进行一个判断",{"2":{"11":1}}],["当cachekey缓存的数据发生变化后",{"2":{"64":1}}],["当这个函数实际运行的时候",{"2":{"62":1}}],["当它的值变化后",{"2":{"60":1}}],["当",{"2":{"60":2}}],["当其值为",{"2":{"60":1}}],["当符合缓存的条件",{"2":{"49":1}}],["当前元素就是被弹出的元素对应的后面最近一个更大元素",{"2":{"23":1}}],["当遍历到一个新元素时",{"2":{"23":1}}],["当台阶数量为2时",{"2":{"21":1}}],["当台阶数量为1时",{"2":{"21":1}}],["当快指针遍历完之后慢指针值走一半",{"2":{"17":1}}],["关于动态规划的题目只要我们想明白了状态转移方程那么这一类的问题就会变得非常容易解决",{"2":{"21":1}}],["基于上面的两个问题",{"2":{"20":1}}],["推导出状态转移方程之后这道题目就很简单了",{"2":{"19":1}}],["即在一个函数运行之前把它劫持下来",{"2":{"62":1}}],["即浏览器失去焦点时间太短的话不去发送请求",{"2":{"61":1}}],["即使用默认配置",{"2":{"58":1}}],["即栈中的元素满足单调递增或单调递减的性质",{"2":{"23":1}}],["即然我们不能同时偷第一个房间和最后一个房间",{"2":{"20":1}}],["即f",{"2":{"19":1}}],["即多次计算相同的子问题",{"2":{"18":1}}],["打家劫舍2",{"0":{"20":1}}],["打家劫舍",{"0":{"19":1}}],["而是带上了被我们添加上去的功能",{"2":{"62":1}}],["而在取消请求时也会取消正在运行的防抖效果",{"2":{"62":1}}],["而在userequestimplement",{"2":{"56":1}}],["而在runasync中每次都会把最新的参数使用state",{"2":{"52":1}}],["而在react中所有的组件重新render要么是自身的props中有属性发生改变",{"2":{"38":1}}],["而插件会返回一个对象",{"2":{"56":1}}],["而userequest最核心的部分也都在这个api的代码中了",{"2":{"49":1}}],["而上面执行了插件的onsuccess所以这里需要重新判断一下",{"2":{"49":1}}],["而每个userequest插件也需要返回一个包含这些属性中某几个的一个对象",{"2":{"48":1}}],["而这个key也就是存入map中的key所以key一样的话会获取到一样的值",{"2":{"64":1}}],["而这个节流的间隔时间我们可以自己定义",{"2":{"61":1}}],["而这里很明显是执行了每个插件返回结果的",{"2":{"48":1}}],["而这时这些属性已经是更新后的值了",{"2":{"47":1}}],["而这时候child组件会认为onclick方法发生了变化",{"2":{"38":1}}],["而第四个参数就是所有插件的oninit方法的返回结果合并后的一个对象",{"2":{"43":1}}],["而创建实例传入了四个参数",{"2":{"43":1}}],["而为了应对这一类请求的场景",{"2":{"40":1}}],["而我们每次update的时候传入的fn都是一个新的方法",{"2":{"39":1}}],["而我们能接到雨水的多少取决于两侧较低的一侧",{"2":{"22":1}}],["而有时候我们如果漏掉了某些依赖项",{"2":{"38":1}}],["而child组件中并没有自身状态",{"2":{"38":1}}],["而",{"2":{"28":1}}],["而不是查询到最后一位就结束",{"2":{"25":1}}],["而不受其他子问题的影响",{"2":{"18":1}}],["而慢指针只有快指针对应的数字不为0时加一",{"2":{"14":1}}],["子问题独立",{"2":{"18":1}}],["问题可以被分解为若干个子问题",{"2":{"18":1}}],["问题的最优解包含了其子问题的最优解",{"2":{"18":1}}],["得到原问题的解",{"2":{"18":1}}],["从缓存中获取请求promise",{"2":{"64":1}}],["从",{"2":{"60":1}}],["从而达到中断请求的目的",{"2":{"51":1}}],["从而提高算法的效率",{"2":{"18":1}}],["从runasync方法的源码中我们可以更清除的知道userequest的生命周期函数的执行时机",{"2":{"49":1}}],["从这一行我们可以看出来fetchinstance",{"2":{"43":1}}],["从这一部分源码中我们可以看出fetchinstance其实是使用fetch构造函数创建了一个实例",{"2":{"43":1}}],["从参数上可以看出这个参数是插件",{"2":{"42":1}}],["从左到右",{"2":{"28":1}}],["从初始状态开始递推计算所有状态的值",{"2":{"18":1}}],["递推计算",{"2":{"18":1}}],["设置缓存数据",{"2":{"64":1}}],["设置订阅事件",{"2":{"64":1}}],["设置定时器重试请求",{"2":{"65":1}}],["设置定时器",{"2":{"64":1}}],["设置拥有节流功能的函数",{"2":{"63":1}}],["设置一个防抖函数并储存",{"2":{"62":1}}],["设置一个left指针代表子数组的左侧边界",{"2":{"13":1}}],["设置loading为true",{"2":{"60":1}}],["设置的值为多大",{"2":{"28":1}}],["设置的多大",{"2":{"28":1}}],["设置初始状态的值",{"2":{"18":1}}],["初始化下拉框的选项等场景",{"2":{"40":1}}],["初始化",{"0":{"35":1},"2":{"18":1}}],["建立状态转移方程",{"2":{"18":1}}],["状态是原问题中需要保存的关键信息",{"2":{"18":1}}],["定义状态转移方程",{"2":{"18":1}}],["定义状态",{"2":{"18":1}}],["它已经不是原本的函数了",{"2":{"62":1}}],["它支持直接传入需要更改的值或者通过函数计算结果两种方式",{"2":{"54":1}}],["它内部只是执行了一次runasync",{"2":{"50":1}}],["它只是一个普通的类",{"2":{"45":1}}],["它没有第二个参数",{"2":{"38":1}}],["它都会被",{"2":{"28":1}}],["它的核心逻辑fetch实现较为简单",{"2":{"66":1}}],["它的核心思想是将原问题划分为若干子问题",{"2":{"18":1}}],["它的作用是防止浏览器失焦了很短时间就重新获取了焦点",{"2":{"61":1}}],["它的每个滑动窗口的最大值分别为",{"2":{"23":1}}],["它的每个元素的下一个更大元素分别为",{"2":{"23":1}}],["它的元素具有单调性",{"2":{"23":1}}],["它通常用于解决区间最值的问题",{"2":{"23":1}}],["它通常用于解决数组和链表相关的问题",{"2":{"7":1}}],["它通过将问题分解为更小的子问题",{"2":{"18":1}}],["以及依赖刷新",{"2":{"60":1}}],["以及插件的各个生命周期的执行时机",{"2":{"49":1}}],["以及声明需要使用的状态",{"2":{"31":1}}],["以避免重复计算",{"2":{"18":1}}],["以达到解决问题的目的",{"2":{"7":1}}],["动态规划算法通常具有以下特点",{"2":{"18":1}}],["动态规划的基本步骤通常如下",{"2":{"18":1}}],["动态规划通常用于求解最优化问题",{"2":{"18":1}}],["动态规划",{"0":{"18":1},"2":{"18":1}}],["故而需要判断一下长度分别为单双数的场景",{"2":{"17":1}}],["链表由于没有下标",{"2":{"17":1}}],["链表的中间节点",{"0":{"17":1},"2":{"17":1}}],["gt",{"2":{"56":11}}],["github",{"2":{"39":1,"62":1,"63":1}}],["got",{"2":{"39":1}}],["gettime",{"2":{"64":4}}],["getcachepromise",{"2":{"64":1}}],["getcache方法",{"2":{"64":1}}],["getcache",{"2":{"64":6}}],["getfieldinstance",{"2":{"31":4}}],["getfieldsvalue",{"2":{"31":2}}],["getactivetfieldvalues",{"2":{"31":2,"32":1}}],["getinternalhooks",{"2":{"31":1}}],["get",{"2":{"16":7,"24":1,"64":3}}],["guessnumber",{"2":{"3":1}}],["guess",{"2":{"3":4}}],["记录窗口中每个字符出现的次数",{"2":{"16":1}}],["记录一下p中每个字符出现的次数",{"2":{"16":1}}],["记录此时子数组的长度",{"2":{"13":1}}],["write",{"2":{"39":1}}],["window",{"2":{"59":1,"61":2}}],["windowmap",{"2":{"16":5}}],["width",{"2":{"26":2,"27":2}}],["when",{"2":{"43":1,"49":2,"59":1,"64":1}}],["whether",{"2":{"2":1}}],["why",{"2":{"39":1}}],["while",{"2":{"2":1,"3":1,"4":1,"7":2,"13":1,"15":1,"24":1,"25":2,"26":2,"27":2}}],["另一个记录当前窗口每个字符出现的次数",{"2":{"16":1}}],["题目地址",{"2":{"24":1,"25":1}}],["题目中的窗口长度固定是p的长度",{"2":{"16":1}}],["题目链接",{"2":{"1":1,"2":1,"3":1,"4":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"22":1,"24":1,"25":1,"26":1,"27":1}}],["的层叠上下文的高度",{"2":{"28":1}}],["的层叠上下文的高度不如",{"2":{"28":1}}],["的值",{"2":{"15":1}}],["的顺序去遍历二叉树",{"2":{"5":1,"8":1}}],["交换",{"2":{"15":1}}],["反转字符串",{"0":{"15":1},"2":{"15":1}}],["d",{"2":{"64":4}}],["date",{"2":{"64":4}}],["data更新后",{"2":{"64":1}}],["data作为入参传入计算结果",{"2":{"54":1}}],["data的值",{"2":{"54":1}}],["datasource",{"2":{"37":1}}],["data",{"2":{"33":1,"37":1,"40":7,"43":2,"45":1,"48":3,"49":2,"54":7,"56":3,"64":23}}],["div>",{"2":{"28":3,"38":4}}],["div",{"2":{"28":3}}],["dp",{"2":{"19":5,"21":5}}],["dynamic",{"2":{"18":1}}],["document不可见或者没有网络的情况下直接返回",{"2":{"61":1}}],["document",{"2":{"59":2}}],["doc",{"2":{"41":1}}],["do",{"2":{"14":1,"15":1,"56":2}}],["delete",{"2":{"64":2}}],["debounce",{"2":{"62":2}}],["debouncesettings",{"2":{"62":1}}],["debouncedfunc",{"2":{"62":1,"63":1}}],["debouncedref",{"2":{"62":5}}],["debouncemaxwait",{"2":{"62":4}}],["debouncetrailing",{"2":{"62":4}}],["debounceleading",{"2":{"62":4}}],["debouncewait",{"2":{"62":5}}],["debounce实现的",{"2":{"62":1}}],["development",{"2":{"39":1}}],["demo",{"2":{"38":1}}],["design的3版本与4版本部分api使用方式有所不同",{"2":{"31":1}}],["defaultparams",{"2":{"35":2,"36":2,"43":1,"60":3}}],["defaultpagesize",{"2":{"33":1}}],["defaultdatasourceref",{"2":{"31":1,"37":1}}],["defaulttype",{"2":{"31":1}}],["default",{"2":{"3":1,"44":1,"56":1,"59":1,"61":1}}],["definition",{"2":{"2":1,"5":1,"8":1,"17":1}}],["declaration",{"2":{"3":1}}],["待数组遍历完一轮后",{"2":{"13":1}}],["将本次订阅需要执行的事件加入事件列表",{"2":{"64":1}}],["将数据存进了map中",{"2":{"64":1}}],["将数组中每一个元素的下标依次入栈",{"2":{"23":1}}],["将储存的原本的runasync重新赋值回来",{"2":{"62":1}}],["将请求存入数组",{"2":{"61":1}}],["将获焦后需要发送的请求存入事件数组",{"2":{"61":1}}],["将事件列表事件一一执行",{"2":{"59":1}}],["将事件从列表移除",{"2":{"59":1}}],["将最近一次请求方法存入事件列表",{"2":{"59":1}}],["将我们的插件封装进去",{"2":{"56":1}}],["将count加1就可以",{"2":{"51":1}}],["将插件中需要进行初始化的状态初始化",{"2":{"46":1}}],["将默认的参数赋值到表单上",{"2":{"35":1}}],["将缓存数据赋值给表单然后请求",{"2":{"35":1}}],["将下标放入left数组中",{"2":{"26":1}}],["将下标放入right数组中",{"2":{"26":1}}],["将栈中比它小的元素弹出",{"2":{"23":1}}],["将问题表示成状态的集合",{"2":{"18":1}}],["将窗口的起始位置对应的字符次数减1",{"2":{"16":1}}],["将起始位置加入结果数组中",{"2":{"16":1}}],["将left指针加1",{"2":{"13":1}}],["将right指针加一",{"2":{"13":1}}],["需要注意limit方法形成了一个闭包",{"2":{"61":1}}],["需要注意需要跳过非数字字母的字符",{"2":{"11":1}}],["需要mount阶段自动请求",{"2":{"60":1}}],["需考虑边界情况",{"2":{"13":1}}],["主要思路为",{"2":{"13":1}}],["长度最小的子数组",{"0":{"13":1},"2":{"13":1}}],["忽略重复元素",{"2":{"12":3}}],["后面是一些力扣上可以运用单调栈去解决的一些问题",{"2":{"23":1}}],["后指针默认指向数组最后一位",{"2":{"12":1}}],["后序遍历",{"2":{"6":1}}],["排序之后对数组遍历",{"2":{"12":1}}],["三数之和需要等于0",{"2":{"12":1}}],["三数之和",{"0":{"12":1},"2":{"12":1}}],["$",{"2":{"11":1,"39":1}}],["9",{"2":{"11":1}}],["^",{"2":{"11":1}}],["让后指针前移一位",{"2":{"11":1}}],["每次",{"2":{"60":1}}],["每次请求成功后设置定时器",{"2":{"59":1}}],["每次让前指针后移一位",{"2":{"11":1}}],["每位都先填充",{"2":{"23":2}}],["每个插件接受两个参数",{"2":{"43":1}}],["每个问题就都和打家劫舍的题目一样了",{"2":{"20":1}}],["每个子问题的解只依赖于该子问题的相关状态",{"2":{"18":1}}],["每个容器装的水取决于较低的一侧",{"2":{"10":1}}],["验证回文字符串",{"0":{"11":1},"2":{"11":1}}],["并移除正在执行的定时器",{"2":{"65":1}}],["并取消正在执行的节流功能",{"2":{"63":1}}],["并返回一个将请求移出数组的方法",{"2":{"61":1}}],["并执行onmutate生命周期",{"2":{"54":1}}],["并处理了异常情况",{"2":{"50":1}}],["并从执行结果中获取stopnow",{"2":{"49":1}}],["并修改type",{"2":{"32":1}}],["并把当前行压入数组",{"2":{"27":1}}],["并储存",{"2":{"24":1}}],["并将结果整合后返回",{"2":{"48":1}}],["并将执行结果合并作为实例第四个参数",{"2":{"43":1}}],["并将其关系放入一个map中映射起来",{"2":{"24":1}}],["并将当前元素设置为其对应结果",{"2":{"23":4}}],["并通过求解子问题的最优解来推导出原问题的最优解",{"2":{"18":1}}],["并存储子问题的解",{"2":{"18":1}}],["并判断是否大于等于目标字符串中对应字符的次数",{"2":{"16":1}}],["并且缓存中的请求promise和当前的请求promise不是一个请求的话会直接将缓存中的promise返回",{"2":{"64":1}}],["并且在里面都分别做了什么事情",{"2":{"64":1}}],["并且储存清除数组的方法",{"2":{"61":1}}],["并且需要mount阶段自动请求",{"2":{"60":1}}],["并且每个插件会返回一个包含各个生命周期事件的对象",{"2":{"56":1}}],["并且把rest作为了该方法的入参",{"2":{"48":1}}],["并且后面使用了filter过滤",{"2":{"43":1}}],["并且userequest最终吐出的所有api都来自这里",{"2":{"43":1}}],["并且始终能够获取最新的状态",{"2":{"39":2}}],["并且始终都可以获取到最新的状态值",{"2":{"39":1}}],["并且始终都可以获取到最新的状态",{"2":{"38":1}}],["并且无论把",{"2":{"28":1}}],["并且慢指针在加一之前将慢指针所在的位置设置为快指针对应的值",{"2":{"14":1}}],["并且更好的了解一下双指针的使用",{"2":{"9":1}}],["并始终去比较最多容器",{"2":{"10":1}}],["盛最多水的容器",{"0":{"10":1},"2":{"10":1}}],["首先",{"2":{"56":1}}],["首先如果不是最新的请求直接中断请求",{"2":{"49":1}}],["首先会执行插件的onrequest生命周期",{"2":{"49":1}}],["首先通过前面的源码我们可以知道pluginimpls是一个由所有插件的执行结果所组成的数组",{"2":{"48":1}}],["首先setstate会修改state中的属性值",{"2":{"47":1}}],["首先需要明白这种render是怎么触发的",{"2":{"38":1}}],["首先就是调用usepagination获取分页相关的操作方法",{"2":{"31":1}}],["首先我们看一下使用最多的runasync",{"2":{"49":1}}],["首先我们看一下这个方法的名字",{"2":{"48":1}}],["首先我们可以看到在主文件中最终返回的userequestimplement",{"2":{"42":1}}],["首先我们要从入口文件开始看起",{"2":{"42":1}}],["首先我们先了解一下这个hooks解决的问题场景",{"2":{"38":1}}],["首先我们先来定义初始状态",{"2":{"21":1}}],["首先我们知道单调栈可以找到数组中下一个更大或更小元素",{"2":{"24":1}}],["首先创建一个数组用于储存结果",{"2":{"23":2}}],["首先要对数组进行排序",{"2":{"9":1}}],["首先这个数字的版本肯定是错的",{"2":{"2":1}}],["分别从前后开始遍历数组",{"2":{"7":1}}],["假设台阶数量为3",{"2":{"21":1}}],["假设arr是一个数组",{"2":{"7":1}}],["假设head是一个链表的首位",{"2":{"7":1}}],["前指针默认指向当前遍历位的下一位",{"2":{"12":1}}],["前后双指针",{"2":{"7":1}}],["前序遍历",{"2":{"6":1}}],["快指针一次走两步",{"2":{"7":1}}],["快慢双指针",{"2":{"7":1}}],["快慢指针",{"2":{"7":1}}],["慢指针一次走一步",{"2":{"7":1}}],["x",{"2":{"38":2}}],["xxx",{"2":{"7":1,"40":2}}],["x26",{"2":{"7":2,"12":4,"13":2,"16":4,"17":4,"22":2,"23":2,"24":2,"25":4,"26":4,"27":4,"35":2,"36":3,"48":1,"59":6,"60":4,"64":4}}],["x3c",{"2":{"1":1,"2":1,"3":1,"4":1,"7":1,"9":2,"10":2,"11":1,"12":4,"13":3,"14":2,"15":1,"16":1,"19":2,"20":3,"21":2,"22":2,"23":4,"24":3,"25":4,"26":2,"27":3,"28":8,"31":5,"37":1,"38":11,"39":7,"42":6,"43":14,"44":1,"45":2,"46":5,"47":2,"48":6,"49":1,"58":2,"59":6,"60":1,"61":3,"62":3,"63":3,"64":4,"65":1}}],["hidden",{"2":{"59":2}}],["higher",{"2":{"3":1}}],["hooks",{"2":{"39":1,"43":1}}],["hover的时候后面的悬浮层会被列表的下一项给覆盖住",{"2":{"28":1}}],["https",{"2":{"39":1,"62":1,"63":1}}],["html",{"2":{"28":1}}],["h",{"2":{"22":2,"27":2}}],["hasownproperty",{"2":{"64":2}}],["hasautorun",{"2":{"36":3,"37":2,"60":5}}],["has",{"2":{"16":2,"24":1,"35":1,"64":1}}],["hello",{"2":{"38":2}}],["heights",{"2":{"26":13,"27":17}}],["height",{"2":{"10":7,"22":8,"26":2,"27":2}}],["head",{"2":{"7":2,"17":4}}],["通过在onerror中使用settimeout重新发起请求实现",{"2":{"65":1}}],["通过useref保证引用地址不变",{"2":{"39":2}}],["通过储存的映射关系",{"2":{"24":1}}],["通过定义状态转移方程",{"2":{"18":1}}],["通过移动指针来调整窗口的大小",{"2":{"7":1}}],["通常是边界情况下的值",{"2":{"18":1}}],["通常是整个数组或者当前查找区间",{"2":{"0":1}}],["通常用于解决字符串或数组中的子串或子序列问题",{"2":{"7":1}}],["通常用于解决数组或字符串中的问题",{"2":{"7":1}}],["通常用于解决链表中的问题",{"2":{"7":1}}],["通常应用于已经排序的数组中",{"2":{"0":1}}],["滑动窗口",{"2":{"7":1}}],["寻找左侧第一个比自己小的元素下标",{"2":{"26":1}}],["寻找右侧第一个比自己小的元素下标",{"2":{"26":1}}],["寻找最长回文子串等",{"2":{"7":1}}],["寻找链表的中间节点等",{"2":{"7":1}}],["寻找旋转排序数组中的最小值",{"0":{"1":1},"2":{"1":1}}],["如下",{"2":{"40":1}}],["如下图",{"2":{"28":1}}],["如图",{"2":{"27":1}}],["如在字符串中寻找最小覆盖子串",{"2":{"7":1}}],["如在有序数组中寻找两个数的和",{"2":{"7":1}}],["如判断链表是否有环",{"2":{"7":1}}],["如果失败次数小于我们配置的重试次数",{"2":{"65":1}}],["如果不是重试请求将count设置为0",{"2":{"65":1}}],["如果不存在缓存数据",{"2":{"64":1}}],["如果请求promise存在",{"2":{"64":1}}],["如果请求在我们配置的时间内响应",{"2":{"58":1}}],["如果数据还在保鲜期内",{"2":{"64":1}}],["如果数据在新鲜时间内",{"2":{"64":1}}],["如果数据经常发生变化",{"2":{"0":1}}],["如果缓存的数据中存在定时器",{"2":{"64":1}}],["如果key一样",{"2":{"64":1}}],["如果有多个请求的话每个请求都有自己的pending状态",{"2":{"61":1}}],["如果设置了ready",{"2":{"60":1}}],["如果设置了默认参数",{"2":{"35":1}}],["如果我们传入了key",{"2":{"64":1}}],["如果我们传入的有设置缓存的方法",{"2":{"64":1}}],["如果我们需要依赖刷新的情况下我们是可以使用refreshdepsaction来自定义依赖发生变化后需要执行的函数的",{"2":{"60":1}}],["如果我们设置了refreshdepsaction",{"2":{"60":1}}],["如果我们没有传入key",{"2":{"64":1}}],["如果我们没有传入loadingdelay配置那么会返回一个空对象",{"2":{"58":1}}],["如果我们没有配置onerror生命周期的话",{"2":{"50":1}}],["如果依赖项发送改变自动发送请求",{"2":{"60":1}}],["如果是新鲜的数据",{"2":{"64":1}}],["如果是ssr服务端渲染的话页面默认一直处于可见状态",{"2":{"59":1}}],["如果是浏览器环境的话判断一下页面是否可见",{"2":{"59":1}}],["如果是第二种情况",{"2":{"1":1}}],["如果页面不可见是否继续轮询",{"2":{"59":1}}],["如果接口响应或者请求被取消",{"2":{"58":1}}],["如果count增加后",{"2":{"51":1}}],["如果存在异常的话",{"2":{"49":1}}],["如果存在缓存数据",{"2":{"35":1,"64":2}}],["如果本次请求不是最新的一次请求的话会返回空的promise中断请求",{"2":{"49":1}}],["如果这个promise不存在的话",{"2":{"49":1}}],["如果returnnow为true不会发送请求",{"2":{"49":1}}],["如果returnnow为true直接将之前最后一次请求的结果返回",{"2":{"49":1}}],["如果启用了缓存策略",{"2":{"49":1}}],["如果stopnow为true的情况下会直接返回一个promise中断本次请求",{"2":{"49":1}}],["如果stopnow",{"2":{"49":1}}],["如果需要loading的话我们会去添加loading的状态等等",{"2":{"40":1}}],["如果没有设置cachekey",{"2":{"64":1}}],["如果没有设置轮询配置",{"2":{"59":1}}],["如果没有传入分页信息",{"2":{"33":1}}],["如果没有则是",{"2":{"23":1}}],["如果栈中倒数第二个元素也比栈底元素大的话",{"2":{"22":1}}],["如果小于等于的话",{"2":{"22":1}}],["如果大于等于",{"2":{"16":1}}],["如果窗口的长度等于目标字符串的长度",{"2":{"16":1}}],["如果窗口中某个字符的次数大于等于目标字符串中该字符的次数",{"2":{"16":1}}],["如果和小于目标值那么就让左侧下标增加一位",{"2":{"9":1}}],["如果和大于目标值那么就让右侧下标减少一位",{"2":{"9":1}}],["如果遍历到了互补数就直接返回map中存的下标和当前下标",{"2":{"9":1}}],["如果第一个版本就错误",{"2":{"2":1}}],["如果在最小值前面的话那么数组后半段无疑是单调递增的",{"2":{"1":1}}],["如果相等则找到目标元素",{"2":{"0":1}}],["一般这种情况我们可能会自己去封装一个自定义hooks",{"2":{"40":1}}],["一旦想明白了思路就会发现这道题其实并没有很复杂",{"2":{"27":1}}],["一个是请求实例fetchinstance另一个是请求配置fetchoptions",{"2":{"43":1}}],["一个列表",{"2":{"28":1}}],["一个记录目标字符串中每个字符出现的次数",{"2":{"16":1}}],["一个指向窗口的右边界",{"2":{"7":1}}],["一个指向窗口的左边界",{"2":{"7":1}}],["一个左指针和一个右指针",{"2":{"7":1}}],["一个快指针和一个慢指针",{"2":{"7":1}}],["一样使用非常常规的二分查找就可以得到结果",{"2":{"3":1}}],["或者自身的内部状态发生改变",{"2":{"38":1}}],["或",{"2":{"7":1}}],["双指针算法的时间复杂度通常是线性的",{"2":{"7":1}}],["双指针算法的基本思路是使用两个指针指向数组或链表的不同位置",{"2":{"7":1}}],["双指针算法包括以下几种常见的类型",{"2":{"7":1}}],["双指针算法通常可以将时间复杂度降到",{"2":{"7":1}}],["双指针是一种常用的算法思想",{"2":{"7":1}}],["双指针",{"0":{"7":1}}],["avoid",{"2":{"64":2}}],["after",{"2":{"59":1}}],["autoerrormessage",{"2":{"56":2}}],["autosuccessmessage",{"2":{"56":2}}],["amp",{"0":{"56":1},"2":{"56":1,"64":1}}],["await",{"2":{"49":1}}],["ahooks",{"2":{"56":1}}],["ahooks里面帮助我们实现了userequest这个hooks",{"2":{"40":1}}],["ahooks中使用了非常巧妙的引用类型引用关系去实现了这两个功能",{"2":{"39":1}}],["apply",{"2":{"39":2}}],["api",{"2":{"3":1}}],["addeventlistener",{"2":{"59":1,"61":2}}],["add",{"2":{"38":3}}],["advance",{"2":{"32":1}}],["alibaba",{"2":{"39":1}}],["alert",{"2":{"38":2}}],["all",{"2":{"33":1,"43":1}}],["allformdata",{"2":{"33":1,"35":1}}],["allformdataref",{"2":{"31":4,"32":2,"33":3,"35":2,"36":1}}],["allfieldsvalue",{"2":{"31":3}}],["activefieldsvalue",{"2":{"31":8,"32":2}}],["assign",{"2":{"43":1,"48":1}}],["as",{"2":{"31":2,"37":1,"39":1,"42":1,"43":1}}],["absolute",{"2":{"28":1}}],["args",{"2":{"39":4,"61":2,"62":2,"63":2,"64":2}}],["area",{"2":{"26":2,"27":2}}],["array",{"2":{"23":2,"24":1,"25":1,"26":2,"27":3,"64":1}}],["arr",{"2":{"7":1}}],["an",{"2":{"59":1}}],["and",{"2":{"35":1,"59":1,"64":2}}],["antdtableresult",{"2":{"37":1}}],["antd4validatefields",{"2":{"31":1}}],["antd",{"2":{"31":6,"34":1,"56":1}}],["any>>",{"2":{"31":2,"62":1,"63":1}}],["any",{"2":{"31":1,"33":1,"34":3,"42":1,"43":3,"44":1,"48":2,"58":2,"59":3,"60":2,"61":5,"62":2,"63":2,"64":2}}],["anything",{"2":{"14":1,"15":1}}],["ans",{"2":{"22":2,"24":3,"25":4}}],["a",{"2":{"5":1,"8":1,"9":2,"11":1,"12":2,"39":1}}],["右",{"2":{"5":1,"8":1}}],["根据cachekey",{"2":{"64":1}}],["根据最终的状态值",{"2":{"18":1}}],["根据比较结果更新查找范围",{"2":{"0":1}}],["根",{"2":{"5":1,"8":1}}],["→",{"2":{"5":2,"8":2}}],["左侧没有墙壁无法形成凹槽",{"2":{"22":1}}],["左右指针",{"2":{"7":1}}],["左",{"2":{"5":1,"8":1}}],["二叉树的后序遍历就是按照",{"2":{"8":1}}],["二叉树的中序遍历就是按照",{"2":{"5":1}}],["二叉树的中序遍历",{"0":{"5":1}}],["二叉树后序遍历",{"0":{"8":1}}],["二叉树基本操作",{"2":{"6":1}}],["二叉树是一种常见的数据结构",{"2":{"6":1}}],["二叉树",{"0":{"6":1}}],["二分法查找通常用于处理静态数据",{"2":{"0":1}}],["二分法查找的时间复杂度是",{"2":{"0":1}}],["二分法查找的实现通常包括以下几个步骤",{"2":{"0":1}}],["二分法查找的基本思想是通过比较中间元素的值和目标元素的值",{"2":{"0":1}}],["二分法查找",{"2":{"0":1}}],["二分查找",{"0":{"0":1,"4":1},"2":{"4":1}}],["customgetcache",{"2":{"64":2}}],["customsetcache",{"2":{"64":2}}],["currentpromiseref",{"2":{"64":2}}],["currentcache",{"2":{"64":3}}],["currentcount",{"2":{"49":6}}],["current都会被重新赋值",{"2":{"39":1}}],["current",{"2":{"31":3,"32":2,"33":4,"34":2,"35":2,"36":3,"37":5,"39":10,"49":4,"58":3,"59":9,"60":4,"61":2,"62":4,"63":4,"64":7,"65":15}}],["curr",{"2":{"5":5,"8":6}}],["child组件不会render",{"2":{"39":1}}],["child组件就不会跟着render了",{"2":{"38":1}}],["child",{"2":{"38":3}}],["changecurrent",{"2":{"37":1}}],["change",{"2":{"36":1}}],["changetype",{"2":{"32":1,"37":2}}],["char",{"2":{"16":3}}],["character",{"2":{"15":1,"27":1}}],["continue",{"2":{"64":1}}],["console",{"2":{"23":2,"38":3,"39":1,"50":1}}],["const",{"2":{"2":1,"3":1,"4":1,"8":1,"19":1,"20":1,"21":1,"23":1,"24":1,"26":3,"27":4,"31":14,"32":2,"33":4,"34":2,"36":1,"38":5,"39":4,"40":5,"43":7,"48":1,"49":4,"58":2,"59":8,"60":1,"61":7,"62":4,"63":3,"64":11,"65":1}}],["component",{"2":{"45":1}}],["com",{"2":{"39":1,"62":1,"63":1}}],["count设置为0",{"2":{"65":1}}],["countref",{"2":{"59":5,"65":7}}],["count相等表示是最新的一次请求",{"2":{"49":1}}],["count",{"2":{"38":5,"45":1,"49":6,"51":1}}],["call",{"2":{"64":2}}],["callback",{"2":{"62":2,"63":2}}],["can",{"2":{"43":1}}],["canceltimeout",{"2":{"58":4}}],["cancel用来取消当前正在发送的请求",{"2":{"51":1}}],["canceled",{"2":{"49":2}}],["cancel",{"0":{"51":1},"2":{"43":3,"62":2,"63":2,"64":2}}],["cachepromise",{"2":{"64":2}}],["cachesubscribe使用了发布订阅模式",{"2":{"64":1}}],["cachesubscribe",{"2":{"64":4}}],["cachetime",{"2":{"64":5}}],["cachekeys",{"2":{"64":2}}],["cachekey",{"2":{"64":16}}],["cachedata",{"2":{"64":12}}],["cachedkey",{"2":{"64":3}}],["cacheddata",{"2":{"64":8}}],["cached",{"2":{"35":1}}],["cache",{"2":{"35":1,"43":1,"64":11}}],["cacheformtabledata",{"2":{"31":2,"35":1}}],["catch",{"2":{"33":1,"49":1,"50":1,"62":1,"63":1}}],["case",{"2":{"3":3}}],["clearcache",{"2":{"64":1}}],["clear",{"2":{"64":2}}],["cleartimeout",{"2":{"58":1,"59":1,"64":1,"65":2}}],["class",{"2":{"44":1}}],["class=",{"2":{"28":3}}],["climbstairs",{"2":{"21":1}}],["should",{"2":{"62":1,"63":1}}],["show",{"2":{"7":2}}],["splice",{"2":{"59":1,"61":1,"64":1}}],["src",{"2":{"41":1}}],["same",{"2":{"36":1,"64":1}}],["success",{"2":{"56":1}}],["successmessage",{"2":{"56":2}}],["subscribefocus",{"2":{"61":1}}],["subscriberevisible",{"2":{"59":1}}],["subscribe",{"2":{"46":2,"47":1,"59":2,"61":1,"64":7}}],["submit",{"2":{"33":4,"35":1,"36":1,"37":2}}],["sum",{"2":{"9":3,"12":3,"13":5}}],["simple",{"2":{"32":2}}],["singly",{"2":{"17":1}}],["size",{"2":{"16":1}}],["self",{"2":{"64":3}}],["servicepromise",{"2":{"48":1,"49":4,"56":1,"64":9}}],["serviceref",{"2":{"43":2,"46":1,"49":2}}],["service",{"2":{"31":1,"42":3,"43":7,"46":1,"48":2,"49":1,"56":4,"64":2}}],["setcachepromise",{"2":{"64":1}}],["setcache和cache",{"2":{"64":1}}],["setcache",{"2":{"64":6}}],["setcount",{"2":{"38":4}}],["setstate",{"0":{"47":1},"2":{"49":3,"51":1,"54":1,"58":1,"64":3}}],["setdata",{"2":{"40":2}}],["setoptions",{"2":{"40":2}}],["settimeout",{"2":{"33":1,"58":1,"59":2,"61":1,"64":1,"65":1}}],["settype",{"2":{"31":1,"32":1}}],["setfieldsvalue",{"2":{"31":2}}],["set",{"2":{"16":3,"24":1,"43":1,"64":1}}],["search",{"2":{"4":1,"37":1}}],["slow",{"2":{"14":4,"17":4}}],["s",{"2":{"11":3,"15":8,"16":13,"47":2}}],["stopsubscribe",{"2":{"61":3}}],["stoppolling",{"2":{"59":4}}],["stop",{"2":{"49":1,"59":1,"64":1}}],["stopnow",{"2":{"48":1,"49":2,"56":1,"60":1}}],["stale",{"2":{"64":1}}],["staletime",{"2":{"64":5}}],["state",{"2":{"43":6,"45":1,"46":2,"47":2,"49":3,"52":1,"53":1,"54":1,"64":4}}],["stack",{"2":{"5":3,"8":4,"22":8,"23":5,"24":6,"25":11,"26":12,"27":12}}],["style>",{"2":{"28":2}}],["str",{"2":{"11":6}}],["string",{"2":{"11":1,"16":2,"31":3,"64":7}}],["something",{"2":{"56":2}}],["sorter",{"2":{"34":2}}],["sort",{"2":{"9":1,"12":1}}],["sortsnums",{"2":{"9":6}}],["solution",{"2":{"2":1}}],["switch",{"2":{"3":1}}],["pending",{"2":{"61":4}}],["public",{"2":{"46":4}}],["push",{"2":{"5":2,"8":3,"12":1,"16":1,"22":1,"23":1,"24":1,"25":1,"26":2,"27":2,"59":1,"61":1,"64":1}}],["pluginreturn",{"2":{"45":1,"48":2}}],["pluginimpls上储存的是所有插件执行结果所组成的一个数组",{"2":{"43":1}}],["pluginimpls",{"2":{"43":2,"48":1}}],["plugin",{"2":{"42":2,"43":3,"56":2,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1}}],["plugins",{"2":{"41":1,"42":2,"43":8}}],["plain|",{"2":{"41":1}}],["place",{"2":{"14":1,"15":1}}],["pickfunction",{"2":{"39":2}}],["picked",{"2":{"3":2}}],["partial",{"2":{"46":1,"47":1,"48":1,"56":1}}],["parent",{"2":{"38":1}}],["parentcomponent",{"2":{"38":1}}],["parameter",{"2":{"39":1}}],["params作为参数执行run方法即可",{"2":{"52":1}}],["params储存起来",{"2":{"52":1}}],["params",{"2":{"31":2,"33":1,"34":1,"35":3,"40":1,"43":6,"45":1,"48":5,"49":14,"50":2,"52":1,"53":1,"56":5,"64":10}}],["param",{"2":{"1":1,"2":3,"3":2,"4":2,"5":1,"8":1,"9":2,"10":1,"11":1,"12":1,"13":2,"14":1,"15":1,"16":2,"17":1,"19":1,"20":1,"21":1,"22":1,"24":2,"25":1,"26":1,"27":2}}],["page",{"2":{"40":2}}],["pagesize",{"2":{"33":1,"34":2,"37":2}}],["pagination",{"2":{"33":3,"34":3,"37":5}}],["process",{"2":{"39":1}}],["props中只存在一个属性onclick",{"2":{"38":1}}],["promise",{"2":{"31":3,"48":1,"49":5,"56":1,"62":2,"63":2}}],["programming",{"2":{"18":1}}],["prevent",{"2":{"49":2}}],["preventdefault",{"2":{"33":1}}],["prev",{"2":{"5":3}}],["p",{"2":{"16":4,"43":8}}],["polling",{"2":{"59":1}}],["pollingerrorretrycount",{"2":{"59":5}}],["pollingwhenhidden",{"2":{"59":3}}],["pollinginterval",{"2":{"59":5}}],["position",{"2":{"28":3}}],["postordertraversal",{"2":{"8":1}}],["pop",{"2":{"5":1,"8":1,"19":1,"20":2,"22":1,"23":1,"24":1,"25":2,"26":2,"27":2}}],["your",{"2":{"3":1}}],["t>>",{"2":{"39":2}}],["t>",{"2":{"39":2}}],["timeout",{"2":{"65":2}}],["timeout>",{"2":{"58":1,"59":1}}],["timer",{"2":{"64":6}}],["timerref",{"2":{"58":4,"59":4,"65":5}}],["timespan",{"2":{"61":2}}],["time",{"2":{"36":1,"64":4}}],["tableprops",{"2":{"37":1}}],["table的onchange方法",{"2":{"34":1}}],["targetdata",{"2":{"54":5}}],["targetmap",{"2":{"16":7}}],["target",{"2":{"4":4,"9":4,"13":4}}],["ts中我们知道所有的插件都传入了fetchinstance和fetchoptions两个参数",{"2":{"56":1}}],["ts文件来看fetch是一个类",{"2":{"45":1}}],["ts的时候我以为state是使用usereducer声明的",{"2":{"45":1}}],["ts的源码我们就也看完了",{"2":{"43":1}}],["ts的最后一部分代码",{"2":{"43":1}}],["ts源码中可以知道plugins是一个数组",{"2":{"43":1}}],["ts",{"0":{"42":1,"43":1,"44":1},"1":{"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1},"2":{"33":2,"34":1,"35":1,"41":5,"43":2,"48":1,"52":1,"53":1,"54":1}}],["tsxfunction",{"2":{"39":1,"40":1}}],["tsxreturn",{"2":{"37":1}}],["tsx",{"2":{"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"39":1}}],["tsxconst",{"2":{"31":1}}],["tparams",{"2":{"33":1,"42":1,"43":3,"44":1,"48":6,"49":1,"50":1,"56":7}}],["tparams>>",{"2":{"46":2,"47":1,"48":1}}],["tparams>",{"2":{"31":1,"37":1,"42":5,"43":11,"45":2,"46":1,"48":2}}],["t",{"2":{"32":2,"39":3}}],["typescriptonsuccess",{"2":{"64":1}}],["typescriptonrequest",{"2":{"64":1}}],["typescriptonbefore",{"2":{"64":1}}],["typescriptusecreation",{"2":{"64":1}}],["typescript",{"2":{"59":1,"61":1,"64":1}}],["typescriptimport",{"2":{"56":2}}],["typescriptmutate",{"2":{"54":1}}],["typescriptreturn",{"2":{"65":1}}],["typescriptrefreshasync",{"2":{"53":1}}],["typescriptrefresh",{"2":{"52":1}}],["typescriptrun",{"2":{"50":1}}],["typescriptrunpluginhandler",{"2":{"48":1}}],["typescriptcancel",{"2":{"51":1}}],["typescriptconstructor",{"2":{"46":1}}],["typescriptconst",{"2":{"43":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":3}}],["typescriptasync",{"2":{"49":1}}],["typescriptsetstate",{"2":{"47":1}}],["typescriptpluginimpls",{"2":{"45":1}}],["typescriptexport",{"2":{"44":1,"48":1,"59":1,"61":1}}],["typescriptfetchinstance",{"2":{"43":1}}],["typescriptfunction",{"2":{"40":1,"42":1,"43":3,"56":1}}],["types",{"2":{"41":1}}],["typeof",{"2":{"39":1}}],["type发生修改时将储存的表单值赋值给表单",{"2":{"32":1}}],["type",{"2":{"31":2,"32":1,"33":1,"37":1}}],["tdata>",{"2":{"48":1,"49":1}}],["tdata",{"2":{"31":1,"37":1,"42":6,"43":14,"44":1,"45":2,"46":3,"47":1,"48":7,"54":4,"56":6}}],["trgger",{"2":{"64":2}}],["triggerbyretry",{"2":{"65":3}}],["trigger",{"2":{"64":4}}],["trailing",{"2":{"62":1,"63":1}}],["trap",{"2":{"22":1}}],["try",{"2":{"49":1}}],["true所以会直接中断请求",{"2":{"60":1}}],["true的时间",{"2":{"58":1}}],["true",{"2":{"11":1,"31":4,"36":1,"37":1,"49":1,"56":2,"58":1,"59":2,"60":6,"61":1,"64":1,"65":1}}],["treenode",{"2":{"5":2,"8":2}}],["tree",{"2":{"5":1,"8":1}}],["test",{"2":{"11":2,"41":1}}],["top",{"2":{"22":2}}],["tolocalelowercase",{"2":{"11":1}}],["total",{"2":{"2":1,"37":2}}],["twosum",{"2":{"9":1}}],["throttle",{"2":{"63":2}}],["throttlesettings",{"2":{"63":1}}],["throttledref",{"2":{"63":5}}],["throttletrailing",{"2":{"63":4}}],["throttleleading",{"2":{"63":4}}],["throttlewait",{"2":{"63":5}}],["throttle实现的",{"2":{"63":1}}],["throw",{"2":{"49":1}}],["threesum",{"2":{"12":1}}],["this",{"2":{"5":3,"8":3,"17":2,"39":4,"46":2,"47":3,"48":1,"49":25,"50":2,"51":3,"52":2,"53":2,"54":3}}],["than",{"2":{"3":2}}],["then",{"2":{"33":1,"40":4,"49":2,"59":1,"62":1,"63":1,"64":1}}],["the",{"2":{"2":2,"3":2,"36":1,"59":1,"64":2}}],["backoff",{"2":{"65":1}}],["bad",{"2":{"2":2}}],["by",{"2":{"64":1}}],["be",{"2":{"62":1,"63":1}}],["bind",{"2":{"43":6,"61":1,"62":1,"63":1}}],["binary",{"2":{"5":1,"8":1}}],["box2",{"2":{"28":5}}],["box",{"2":{"28":5}}],["boolean",{"2":{"2":1,"11":1,"43":2,"48":3,"56":2,"59":1}}],["button>",{"2":{"38":3}}],["button",{"2":{"28":1,"38":4}}],["b",{"2":{"9":2,"12":2}}],["break",{"2":{"3":3,"25":1}}],["visibilitychange",{"2":{"59":1,"61":1}}],["visibilitystate",{"2":{"59":1}}],["v3",{"2":{"31":1}}],["v4",{"2":{"31":1}}],["v4版本",{"2":{"31":1}}],["void>",{"2":{"59":1,"61":1}}],["void",{"2":{"14":1,"15":1,"48":6,"56":5,"59":1,"61":1}}],["values",{"2":{"31":2,"33":3}}],["validatefields",{"2":{"31":3,"33":1}}],["val===undefined",{"2":{"5":1,"8":1,"17":1}}],["val",{"2":{"5":4,"8":4,"17":3}}],["var",{"2":{"1":1,"2":1,"3":2,"4":1,"5":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"19":1,"20":1,"21":1,"22":1,"24":1,"25":1,"26":1,"27":2}}],["versions",{"2":{"2":1}}],["version",{"2":{"2":4}}],["it",{"2":{"64":2}}],["item",{"2":{"28":5,"64":2}}],["import",{"2":{"56":1}}],["ignore",{"2":{"33":2,"34":1,"35":2,"43":1,"48":1,"52":1,"53":1,"54":1}}],["i++",{"2":{"12":1,"19":1,"20":2,"21":1,"22":1,"23":2,"24":2,"25":2,"26":2,"27":3,"59":1,"61":1}}],["i",{"2":{"12":8,"19":6,"20":24,"21":5,"22":5,"23":10,"24":10,"25":9,"26":16,"27":19,"48":2,"59":3,"61":3}}],["interface",{"2":{"48":1}}],["integer",{"2":{"2":3}}],["initstate",{"2":{"43":3,"46":2}}],["init",{"2":{"35":1,"43":1,"64":1}}],["initpagination",{"2":{"33":2}}],["instead",{"2":{"14":1,"15":1}}],["in",{"2":{"14":1,"15":1}}],["indexof",{"2":{"59":1,"61":1,"64":1}}],["index属性首先要理解一个名词",{"2":{"28":1}}],["index属性的作用到底是怎么回事",{"2":{"28":1}}],["index调整为了10000",{"2":{"28":1}}],["index就可以了",{"2":{"28":1}}],["index设置的不够大",{"2":{"28":1}}],["index",{"2":{"9":2,"27":4,"28":8,"41":1,"59":2,"61":2,"64":2}}],["inordertraversal",{"2":{"5":1}}],["if",{"2":{"2":3,"3":2,"4":2,"9":1,"12":1,"13":3,"19":1,"20":5,"21":1,"24":1,"25":1,"27":3,"31":9,"32":1,"33":3,"35":3,"36":2,"37":3,"39":4,"43":1,"49":7,"50":1,"54":1,"56":2,"58":2,"59":9,"60":5,"61":4,"62":5,"63":4,"64":19,"65":4}}],["isarray",{"2":{"64":1}}],["isantdv4",{"2":{"31":4}}],["issuecomment",{"2":{"62":1,"63":1}}],["issues",{"2":{"39":1,"62":1,"63":1}}],["isonline",{"2":{"61":1}}],["isbrowser",{"2":{"59":2,"61":1}}],["isbadversion",{"2":{"2":6}}],["isdocumentvisible的实现很简单",{"2":{"59":1}}],["isdocumentvisible",{"2":{"59":3,"61":1}}],["isfunction",{"2":{"39":1,"54":1}}],["ispalindrome",{"2":{"11":1}}],["is",{"2":{"2":1,"3":2,"39":1,"49":2,"59":2,"64":3}}],["则取消请求",{"2":{"64":1}}],["则将loading设置为false",{"2":{"64":1}}],["则不做处理",{"2":{"64":1}}],["则不做任何操作",{"2":{"59":1}}],["则不执行缓存初始化逻辑",{"2":{"64":1}}],["则只清除key对应的缓存",{"2":{"64":1}}],["则通过",{"2":{"60":1}}],["则默认10页",{"2":{"33":1}}],["则匹配成功",{"2":{"16":1}}],["则说明该字符已经匹配了",{"2":{"16":2}}],["则可以直接返回",{"2":{"2":1}}],["则需要重新排序",{"2":{"0":1}}],["我们再来看一下这个插件的生命周期有哪些",{"2":{"64":1}}],["我们再来看一下生命周期流程图",{"2":{"56":1}}],["我们没有设置缓存的方法使用默认的缓存方法",{"2":{"64":1}}],["我们先来看一下这两个方法",{"2":{"64":1}}],["我们先来看一下这个插件提供的配置项以及作用",{"2":{"64":1}}],["我们先看一下这个hooks入参和userequest是一样的",{"2":{"43":1}}],["我们就可以写成一个插件",{"2":{"56":1}}],["我们不想在每次请求后写",{"2":{"56":1}}],["我们不用穷举法",{"2":{"21":1}}],["我们传入的请求函数的执行结果promise",{"2":{"56":1}}],["我们使用userequest时传入的请求配置",{"2":{"56":1}}],["我们看过上面的源码后知道userequest插件就是一个函数",{"2":{"56":1}}],["我们看到这里就知道了",{"2":{"45":1}}],["我们从runasync的源码中是可以看出",{"2":{"51":1}}],["我们从userequest",{"2":{"43":1}}],["我们知道这个方法是和插件相关的方法",{"2":{"48":1}}],["我们打开fetch",{"2":{"45":1}}],["我们现在只需要记住这些信息",{"2":{"43":1}}],["我们发现这个时候就只有parentcomponent进行了render",{"2":{"38":1}}],["我们把上面的代码做一下修改然后再试一下",{"2":{"38":1}}],["我们在使用这个hooks的时候所用到的状态api都在state这个属性上面",{"2":{"45":1}}],["我们在很多情况下都会往子组件中传入一个方法",{"2":{"38":1}}],["我们在遍历的过程中需要思考一下",{"2":{"22":1}}],["我们只看第一行",{"2":{"27":1}}],["我们只用比较一下窗口对应的map中与目标map中相等的字符数是否等于目标map的size就能得到是否是异位词",{"2":{"16":1}}],["我们可以设置一个loadingdelay配置",{"2":{"58":1}}],["我们可以看一下具体代码",{"2":{"65":1}}],["我们可以看一下官网的介绍",{"2":{"60":1}}],["我们可以看出",{"2":{"47":1}}],["我们可以看到",{"2":{"47":1,"61":1}}],["我们可以这样写",{"2":{"40":1}}],["我们可以将矩阵中的一行一行压入一个数组",{"2":{"27":1}}],["我们可以使用双指针去解决这道题目",{"2":{"13":1}}],["我们第一步就是需要把这个矩阵转换为数组",{"2":{"27":1}}],["我们需要好好看一下内部的实现",{"2":{"49":1}}],["我们需要先思考一下如何去计算每个位置的元素所能形成的最大面积",{"2":{"26":1}}],["我们需要计算符合条件的子数组的最小长度",{"2":{"13":1}}],["我们的栈的长度应该是不为0的",{"2":{"25":1}}],["我们的思路为",{"2":{"22":1}}],["我们依旧使用本题的默认案例看一下解题思路",{"2":{"22":1}}],["我们此时需要思考如果想上到第三阶",{"2":{"21":1}}],["我们偷最后一个房间",{"2":{"20":1}}],["我们偷第一个房间",{"2":{"20":1}}],["我们判断每个窗口的字符串是否是目标字符串的异位词的方式就是比较两个字符串中每个字母出现的次数是否相同",{"2":{"16":1}}],["我们首先需要思考一下这个数字需要符合的条件",{"2":{"2":1}}],["我们分别分析一下这两种情况",{"2":{"1":1}}],["其具体行为如下",{"2":{"60":1}}],["其他的功能全部是通过插件的方式去实现的",{"2":{"56":1}}],["其实这个时候我们看加上坐标轴之后我们就应该明白这道图如何转换为柱状图中的最大矩形了",{"2":{"27":1}}],["其实就是查找1～n中的某个数字",{"2":{"2":1}}],["其次这个数字前面的一个版本肯定是对的",{"2":{"2":1}}],["其中我们需要找到使某个目标函数最大或最小的值",{"2":{"18":1}}],["其中快指针每次循环都会加一",{"2":{"14":1}}],["其中",{"2":{"0":1,"23":1}}],[">+",{"2":{"38":2}}],[">=",{"2":{"13":1,"26":1,"27":1}}],[">",{"2":{"1":1,"4":1,"12":1,"13":1,"22":1,"23":2,"24":1,"25":2,"26":4,"27":4,"28":3,"35":1,"38":2,"42":1,"43":3,"44":1,"48":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":2}}],["message",{"2":{"56":4}}],["memoizedfn",{"2":{"39":7}}],["memo",{"2":{"38":1}}],["mutablerefobject",{"2":{"46":1}}],["mutate方法用于修改state",{"2":{"54":1}}],["mutate",{"0":{"54":1},"2":{"43":2}}],["mount的时候自定触发一次请求",{"2":{"43":1}}],["movezeroes",{"2":{"14":1}}],["modify",{"2":{"14":1,"15":1}}],["minlen",{"2":{"13":6}}],["minsubarraylen",{"2":{"13":1}}],["min",{"2":{"10":1,"13":1,"22":1,"65":1}}],["middlenode",{"2":{"17":1}}],["mid",{"2":{"1":4,"2":7,"3":5,"4":6}}],["manual=true",{"2":{"60":1}}],["manual=false",{"2":{"60":1}}],["manual",{"2":{"31":1,"35":2,"36":1,"37":1,"43":4,"46":1,"60":5}}],["matrix",{"2":{"27":7}}],["matchcount减1",{"2":{"16":1}}],["matchcount",{"2":{"16":2}}],["math",{"2":{"1":1,"2":1,"3":1,"4":1,"10":2,"13":1,"19":3,"20":6,"22":1,"26":1,"27":2,"65":1}}],["maxwait",{"2":{"62":1}}],["maximalrectangle",{"2":{"27":1}}],["max",{"2":{"10":1,"19":4,"20":6,"26":1,"27":2}}],["maxv",{"2":{"10":3}}],["maxarea",{"2":{"10":1,"26":4,"27":8}}],["map",{"2":{"9":1,"16":2,"24":5,"27":1,"43":4,"48":1,"64":1}}],["+=",{"2":{"13":1,"22":1,"49":1,"51":1,"59":1,"65":1}}],["+",{"2":{"1":2,"2":2,"3":2,"4":2,"9":1,"12":4,"13":2,"16":3,"19":2,"20":2,"21":4,"23":1,"27":1,"38":2}}],["\\ti",{"2":{"25":6}}],["\\tif",{"2":{"7":1,"8":1,"17":1}}],["\\tstack",{"2":{"23":1}}],["\\tshow",{"2":{"7":1}}],["\\t当前元素",{"2":{"23":12}}],["\\tfor",{"2":{"12":1,"16":1,"22":1,"23":1}}],["\\tfast",{"2":{"7":1}}],["\\tnums",{"2":{"12":1}}],["\\tconst",{"2":{"5":2,"8":1,"9":1,"11":2,"16":3}}],["\\treturn",{"2":{"1":1,"5":1,"8":1,"9":1,"10":1,"11":1,"12":1,"16":1,"17":1,"22":1}}],["\\t",{"2":{"1":2,"3":1,"5":1,"7":3,"8":1,"9":2,"10":1,"11":1,"12":1,"14":2,"16":2,"17":2,"22":1,"23":5,"24":4,"26":8,"49":2}}],["\\t\\t弹出之后",{"2":{"23":1}}],["\\t\\t下标5入栈",{"2":{"23":1}}],["\\t\\t下标4入栈",{"2":{"23":1}}],["\\t\\t下标3入栈",{"2":{"23":1}}],["\\t\\t下标2入栈",{"2":{"23":1}}],["\\t\\t下标1入栈",{"2":{"23":1}}],["\\t\\t下标0入栈",{"2":{"23":1}}],["\\t\\t栈中最后一位对应数组中的元素为",{"2":{"23":6}}],["\\t\\t栈中无元素",{"2":{"23":3}}],["\\t\\t第二层遍历",{"2":{"23":6}}],["\\t\\tstack",{"2":{"22":1}}],["\\t\\tslow",{"2":{"17":1}}],["\\t\\tslow++",{"2":{"14":1}}],["\\t\\tfast",{"2":{"17":1}}],["\\t\\tfast++",{"2":{"14":1}}],["\\t\\twindowmap",{"2":{"16":1}}],["\\t\\twhile",{"2":{"5":1,"22":1}}],["\\t\\ttargetmap",{"2":{"16":1}}],["\\t\\tnums",{"2":{"14":1}}],["\\t\\tlet",{"2":{"12":2}}],["\\t\\tleft++",{"2":{"7":1,"11":1}}],["\\t\\tmaxv",{"2":{"10":1}}],["\\t\\tres",{"2":{"23":1}}],["\\t\\tresult",{"2":{"5":1,"8":1}}],["\\t\\treturn",{"2":{"17":1}}],["\\t\\tright++",{"2":{"16":1}}],["\\t\\tright",{"2":{"7":1,"11":1}}],["\\t\\tcurr",{"2":{"5":1}}],["\\t\\tconst",{"2":{"1":1,"5":1,"8":1,"9":1}}],["\\t\\t\\tbreak",{"2":{"23":1}}],["\\t\\t\\t已经是最后一个元素",{"2":{"23":1}}],["\\t\\t\\t第二层遍历当前元素",{"2":{"23":7}}],["\\t\\t\\tans",{"2":{"22":1}}],["\\t\\t\\twindowmap",{"2":{"16":1}}],["\\t\\t\\twhile",{"2":{"12":1}}],["\\t\\t\\tif",{"2":{"16":2,"22":1}}],["\\t\\t\\tmatchcount++",{"2":{"16":1}}],["\\t\\t\\tslow++",{"2":{"14":1}}],["\\t\\t\\tstack",{"2":{"5":1,"8":2}}],["\\t\\t\\tnums",{"2":{"14":1}}],["\\t\\t\\t\\tbreak",{"2":{"22":1}}],["\\t\\t\\t\\tmatchcount",{"2":{"16":1}}],["\\t\\t\\t\\tresult",{"2":{"16":1}}],["\\t\\t\\t\\t",{"2":{"12":3}}],["\\t\\t\\t\\t\\tright",{"2":{"12":2}}],["\\t\\t\\t\\t\\tresult",{"2":{"12":1}}],["\\t\\t\\t\\t\\tleft++",{"2":{"12":2}}],["\\t\\t\\t\\t\\t\\tright",{"2":{"12":1}}],["\\t\\t\\t\\t\\t\\tleft++",{"2":{"12":1}}],["\\t\\t\\t\\t\\t",{"2":{"12":2}}],["\\t\\t\\t\\t\\twhile",{"2":{"12":2}}],["\\t\\t\\t\\tif",{"2":{"12":1}}],["\\t\\t\\t\\tconst",{"2":{"12":1}}],["\\t\\t\\tconst",{"2":{"22":4}}],["\\t\\t\\tcontinue",{"2":{"11":2}}],["\\t\\t\\tcurr",{"2":{"5":1}}],["\\t\\t\\tresult",{"2":{"23":1}}],["\\t\\t\\treturn",{"2":{"9":1,"11":1}}],["\\t\\t\\tright",{"2":{"1":1,"9":1,"10":1,"11":1}}],["\\t\\t\\t",{"2":{"3":1,"12":1,"16":2,"22":1}}],["\\t\\t\\tleft++",{"2":{"9":1,"10":1,"11":1,"16":1}}],["\\t\\t\\tleft",{"2":{"1":1}}],["\\t\\t",{"2":{"1":2,"5":1,"8":2,"9":3,"10":2,"11":3,"12":1,"14":1,"16":2,"22":1,"23":1,"27":2}}],["\\t\\tif",{"2":{"1":1,"8":2,"9":1,"10":1,"11":3,"12":1,"14":1,"16":2,"23":1}}],["\\twhile",{"2":{"1":1,"5":1,"8":1,"9":1,"10":1,"11":1,"14":2,"16":1,"17":1,"23":1}}],["\\tlet",{"2":{"1":2,"5":1,"9":2,"10":3,"11":2,"12":1,"14":2,"16":3,"17":2,"22":2}}],["10",{"2":{"33":1}}],["1000",{"2":{"65":1}}],["100",{"2":{"28":1}}],["1+1或者2",{"2":{"21":1}}],["1",{"2":{"1":2,"2":7,"3":8,"4":4,"7":1,"9":3,"10":1,"11":1,"12":5,"13":3,"15":1,"16":5,"19":3,"20":7,"21":4,"22":8,"23":95,"24":2,"25":28,"26":5,"27":11,"28":1,"33":1,"35":1,"36":1,"37":1,"38":4,"43":1,"47":1,"49":1,"51":1,"56":1,"59":5,"61":1,"64":4,"65":2}}],["r",{"2":{"48":2}}],["run是runasync的同步版本",{"2":{"50":1}}],["runpluginhandler",{"0":{"48":1},"2":{"49":6,"51":1,"54":1}}],["runasync中会判定不是最新的请求",{"2":{"51":1}}],["runasync中比较不是请求编号和count不相等会返回空promise取消请求",{"2":{"51":1}}],["runasync",{"0":{"49":1},"2":{"43":2,"49":1,"50":1,"53":1,"60":1,"62":6,"63":4}}],["run",{"0":{"50":1},"2":{"31":1,"33":2,"34":1,"35":1,"40":4,"43":4,"49":2,"52":1,"60":2}}],["rob",{"2":{"19":1,"20":1}}],["root",{"2":{"5":3,"8":4}}],["revalidate",{"2":{"59":2,"61":3}}],["revisible",{"2":{"59":1}}],["reversestring",{"2":{"15":1}}],["retryinterval",{"2":{"65":1}}],["retrycount",{"2":{"65":2}}],["retries",{"2":{"59":1}}],["ret",{"2":{"62":5}}],["returnnow就会设置为true这时会返回上一次请求的data结果",{"2":{"49":1}}],["returnnow两个属性",{"2":{"49":1}}],["returnnow配置",{"2":{"49":1}}],["returnnow",{"2":{"48":1,"49":2,"56":1,"64":1}}],["return",{"2":{"1":1,"2":7,"3":5,"4":3,"5":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":2,"14":2,"15":2,"16":1,"17":1,"19":3,"20":3,"21":3,"22":1,"24":2,"25":2,"26":2,"27":8,"31":8,"32":1,"33":2,"35":1,"37":2,"38":3,"39":3,"40":2,"42":1,"43":2,"48":1,"49":6,"53":1,"56":3,"58":3,"59":6,"60":4,"61":6,"62":5,"63":4,"64":11}}],["repeated",{"2":{"59":1}}],["replace",{"2":{"49":1}}],["request",{"2":{"49":3,"59":1,"64":2}}],["render",{"2":{"38":2}}],["refreshonwindowfocus",{"2":{"61":3}}],["refresh会使用最近的一次参数重新发起一次请求",{"2":{"52":1}}],["refreshasync方法是refresh的异步版本",{"2":{"53":1}}],["refreshasync",{"0":{"53":1},"2":{"43":2}}],["refreshdepsaction",{"2":{"60":3}}],["refreshdeps",{"2":{"37":1,"60":3}}],["refresh",{"0":{"52":1},"2":{"36":1,"43":2,"59":2,"60":1,"61":1,"65":1}}],["ready=false",{"2":{"60":1}}],["ready变为true的时候重新发送请求",{"2":{"36":1}}],["ready变化自动提交表单",{"0":{"36":1}}],["ready",{"2":{"32":1,"33":1,"35":2,"36":3,"37":1,"60":9}}],["reject",{"2":{"31":2,"62":2,"63":2}}],["recorddata>",{"2":{"64":1}}],["record",{"2":{"31":2,"33":1,"64":1}}],["relative",{"2":{"28":2}}],["resubscribe",{"2":{"64":2}}],["result",{"2":{"5":2,"8":2,"12":2,"16":2,"23":2,"31":2,"37":7,"43":1}}],["resetfields",{"2":{"33":1,"36":1}}],["reset",{"2":{"33":1,"37":2}}],["resolve",{"2":{"31":3,"49":1,"62":2,"63":2}}],["restparams",{"2":{"34":2}}],["restoreform",{"2":{"31":1,"32":1,"35":2,"36":1}}],["rest",{"2":{"31":1,"43":2,"48":2}}],["res",{"2":{"23":2,"40":8,"49":9}}],["reg",{"2":{"11":3}}],["right++",{"2":{"13":1}}],["right指针代表子数组的右侧边界",{"2":{"13":1}}],["right===undefined",{"2":{"5":1,"8":1}}],["right",{"2":{"1":4,"2":4,"3":4,"4":4,"5":4,"7":2,"8":5,"9":4,"10":5,"11":4,"12":8,"13":5,"15":6,"16":8,"22":3,"26":3,"27":3}}],["0",{"2":{"1":1,"3":2,"4":1,"5":1,"7":1,"8":1,"9":5,"10":2,"11":1,"12":4,"13":6,"14":4,"15":1,"16":6,"17":1,"19":2,"20":3,"21":1,"22":7,"23":10,"24":3,"25":8,"26":7,"27":25,"33":2,"35":2,"36":1,"45":1,"59":4,"61":1,"65":4}}],["lt",{"2":{"56":4}}],["largestrectanglearea",{"2":{"26":1,"27":2}}],["lastdp",{"2":{"20":7}}],["limit的源码就是实现了一个节流的功能",{"2":{"61":1}}],["limit的作用是节流",{"2":{"61":1}}],["limit",{"2":{"61":2}}],["limitrefresh",{"2":{"61":2}}],["listener",{"2":{"59":5,"61":5,"64":5}}],["listeners",{"2":{"59":6,"61":6,"64":8}}],["listnode",{"2":{"17":3}}],["list",{"2":{"17":1,"37":1}}],["linked",{"2":{"17":1}}],["lodash",{"2":{"62":2,"63":2}}],["loading就不会变为true",{"2":{"58":1}}],["loadingdelay",{"2":{"58":3}}],["loading",{"2":{"37":2,"43":2,"45":1,"46":1,"49":3,"51":1,"58":2,"60":1,"64":2}}],["log",{"2":{"23":2,"38":3}}],["logn",{"2":{"0":1}}],["lower",{"2":{"3":1}}],["leading",{"2":{"62":1,"63":1}}],["let",{"2":{"2":2,"3":2,"4":2,"7":4,"12":1,"13":4,"15":2,"16":1,"19":1,"20":2,"21":1,"22":1,"23":6,"24":4,"25":4,"26":7,"27":10,"49":1,"54":1,"59":1,"61":2,"64":2}}],["length",{"2":{"1":1,"4":1,"5":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":2,"13":2,"14":2,"15":1,"16":2,"19":2,"20":3,"22":5,"23":7,"24":5,"25":8,"26":11,"27":15,"35":1,"59":1,"61":1}}],["left++",{"2":{"13":1,"15":1}}],["left===undefined",{"2":{"5":1,"8":1}}],["left",{"2":{"1":5,"2":5,"3":5,"4":5,"5":4,"7":2,"8":5,"9":4,"10":5,"11":4,"12":8,"13":6,"15":5,"16":8,"22":3,"26":3,"27":3}}],["fresh",{"2":{"64":1}}],["from",{"2":{"43":1,"56":3,"64":1}}],["focus",{"2":{"61":1}}],["focustimespan",{"2":{"61":3}}],["foreach",{"2":{"31":2,"64":2}}],["formatresultref",{"2":{"49":2}}],["formattedresult",{"2":{"49":1}}],["form",{"2":{"31":14,"33":4,"36":2}}],["forward",{"2":{"3":1}}],["for",{"2":{"2":1,"5":1,"8":1,"13":1,"17":1,"19":1,"20":2,"21":1,"23":2,"24":2,"25":2,"26":3,"27":4,"59":1,"61":1}}],["fetchstate",{"2":{"45":1,"46":1,"47":1,"48":1,"56":1}}],["fetch实参",{"2":{"43":1,"47":1}}],["fetchoptions",{"2":{"43":7,"56":1}}],["fetchinstance",{"2":{"43":25,"56":2,"58":2,"59":3,"60":3,"61":3,"62":7,"63":5,"64":7,"65":1}}],["fetch",{"0":{"44":1},"1":{"45":1,"46":1,"47":1,"48":1,"49":1,"50":1,"51":1,"52":1,"53":1,"54":1},"2":{"40":2,"41":1,"43":1,"44":1}}],["fn`",{"2":{"39":1}}],["fnref",{"2":{"39":6}}],["fn",{"2":{"39":9,"61":2}}],["f",{"2":{"19":2,"21":4}}],["false",{"2":{"11":1,"36":2,"43":1,"45":1,"49":4,"51":1,"58":1,"59":2,"60":4,"61":4,"64":2,"65":1}}],["fast",{"2":{"7":4,"14":4,"17":6}}],["filter",{"2":{"43":2,"48":1}}],["filters",{"2":{"34":2}}],["fill",{"2":{"23":2,"24":1,"25":1,"26":2,"27":3}}],["fields",{"2":{"31":3}}],["findanagrams",{"2":{"16":1}}],["findmin",{"2":{"1":1}}],["firstdp",{"2":{"20":7}}],["first",{"2":{"2":1}}],["floor",{"2":{"1":1,"2":1,"3":1,"4":1}}],["function",{"2":{"1":1,"2":5,"3":2,"4":1,"5":2,"8":2,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":2,"19":1,"20":1,"21":1,"22":1,"24":1,"25":1,"26":1,"27":2,"39":3,"40":2,"56":1,"59":3,"61":3,"64":1}}],["=>",{"2":{"9":2,"12":1,"27":1,"31":8,"32":3,"33":6,"34":1,"35":1,"36":1,"37":1,"38":6,"39":2,"40":7,"43":7,"48":8,"49":3,"50":1,"54":1,"56":3,"58":6,"59":13,"60":5,"61":11,"62":9,"63":8,"64":18,"65":5}}],["==",{"2":{"5":2,"11":1,"12":1,"14":1,"49":2,"59":2,"62":3,"63":2,"64":1}}],["===",{"2":{"2":1,"4":1,"9":1,"12":4,"13":1,"16":4,"20":4,"22":1,"25":1,"27":3,"32":1,"39":1,"49":2,"59":1,"64":2,"65":1}}],["=",{"2":{"1":6,"2":8,"3":8,"4":7,"5":10,"7":6,"8":7,"9":5,"10":5,"11":5,"12":6,"13":8,"14":5,"15":4,"16":7,"17":7,"19":6,"20":12,"21":9,"22":9,"23":9,"24":7,"25":13,"26":15,"27":22,"31":18,"32":3,"33":6,"34":2,"35":2,"36":4,"37":1,"38":6,"39":9,"40":5,"43":18,"45":2,"46":2,"47":2,"48":1,"49":8,"54":2,"56":12,"58":4,"59":18,"60":10,"61":14,"62":11,"63":9,"64":29,"65":9}}],["此状态用于判断当前显示的是否是高级搜索",{"2":{"31":1}}],["此时很多位的值都是0",{"2":{"27":1}}],["此时第四行压入数组",{"2":{"27":1}}],["此时数组为",{"2":{"27":2}}],["此时扩散的宽度就是宽",{"2":{"26":1}}],["此时栈中还有",{"2":{"25":1}}],["此时我们创建一个数组为",{"2":{"27":1}}],["此时我们的栈中存在的是还没有找到下一个最大元素的值的下标",{"2":{"25":1}}],["此时我们需要思考一下",{"2":{"25":1}}],["此时我们计算范围内最右侧的数字一定是大于中间数字的",{"2":{"1":1}}],["此时可能会形成一个凹槽",{"2":{"22":1}}],["此时记录的最小长度就是结果",{"2":{"13":1}}],["此外题目中有说明数组中不存在重复元素",{"2":{"1":1}}],["因ant",{"2":{"31":1}}],["因为在初始化的时候绑定了订阅事件",{"2":{"64":1}}],["因为设置ready为false时onbefore生命周期会返回stopnow",{"2":{"60":1}}],["因为我们可能会轮询多个请求",{"2":{"59":1}}],["因为我们需要在第二个参数中输入依赖项",{"2":{"38":1}}],["因为memoizedfn一旦存在值就不会被重新创建了",{"2":{"39":1}}],["因为",{"2":{"28":1}}],["因为数组是排序的",{"2":{"1":1}}],["因此在面试和竞赛等场合也经常被使用",{"2":{"7":1,"23":1}}],["因此在处理大规模数据时效率较高",{"2":{"7":1,"23":1}}],["因此它比顺序查找和哈希查找等算法的时间复杂度更低",{"2":{"0":1}}],["最初我就以为是这个悬浮层的z",{"2":{"28":1}}],["最近开始参与了公司的组件库工作",{"2":{"28":1}}],["最大面积为6",{"2":{"27":1}}],["最大矩形",{"0":{"27":1},"2":{"27":1}}],["最终将所有插件的",{"2":{"48":1}}],["最终将形成的凹槽面积加起来",{"2":{"22":1}}],["最终暴露的状态api",{"2":{"45":1}}],["最终返回api",{"2":{"37":1}}],["最终结果为",{"2":{"23":1,"25":1}}],["最终结果",{"2":{"23":1}}],["最终找到目标元素或者确认目标元素不存在",{"2":{"0":1}}],["最优子结构",{"2":{"18":1}}],["最后执行setstate完成赋值",{"2":{"54":1}}],["最后是onfinally以及插件的onfinally生命周期",{"2":{"49":1}}],["最后是请求异常的情况",{"2":{"49":1}}],["最后一次请求中表单的数据",{"2":{"31":1}}],["最后看第四行",{"2":{"27":1}}],["最后计算每个位置所能形成的最大面积并比较",{"2":{"26":1}}],["最后比较得出",{"2":{"27":1}}],["最后比较出最大的一个作为结果",{"2":{"26":1}}],["最后比较记录较小的长度",{"2":{"13":1}}],["最后返回",{"2":{"10":1}}],["最小值在右侧",{"2":{"1":1}}],["最小值在后面",{"2":{"1":1}}],["最小值在前面",{"2":{"1":1}}],["这也是我们常见的钩子函数的原理之一",{"2":{"62":1}}],["这也就意味着我们可以通过插件来扩展userequest的功能",{"2":{"42":1}}],["这些生命周期会在请求的不同时机自动触发",{"2":{"56":1}}],["这些方法会在userequest的特定生命周期中执行",{"2":{"48":1}}],["这是因为我们是可以在插件生命周期中修改count的",{"2":{"49":1}}],["这一步的作用是保证同一个key下只有一个请求被发起",{"2":{"64":1}}],["这一点设计的很巧妙",{"2":{"61":1}}],["这一点说明并不是所有的插件都需要oninit方法",{"2":{"43":1}}],["这一道题主要难在思路比较难想",{"2":{"27":1}}],["这一道题目我们依旧可以使用单调栈的思路去解决",{"2":{"22":1}}],["这一道题目是一道滑动窗口类型的题目",{"2":{"13":1}}],["这一道题目思路比较简单",{"2":{"2":1}}],["这一道题目",{"2":{"1":1,"3":1}}],["这种情况是没有必要去重新发送请求的",{"2":{"61":1}}],["这种情况下我们一般会再暴露出一个发送请求的方法",{"2":{"40":1}}],["这种场景是因为我们的add方法中依赖了count状态",{"2":{"38":1}}],["这时候我们就会发现只要我们的prarentcomponent组件进行render",{"2":{"38":1}}],["这道题的难点就在于问题的转换",{"2":{"27":1}}],["这道题目需要计算为1的元素组成的最大矩形面积",{"2":{"27":1}}],["这道题目需要我们知道链表这个数据结构",{"2":{"17":1}}],["这道题目有点复杂",{"2":{"26":1}}],["这道题目同样是计算数组中的下一个更大元素",{"2":{"25":1}}],["这道题目可以就可以使用单调栈的思想去解",{"2":{"24":1}}],["这道题目可以使用双指针来解决",{"2":{"12":1}}],["这道题目可以使用前后双指针去解决",{"2":{"10":1}}],["这道题目是非常适合入门动态规划的一道题目",{"2":{"21":1}}],["这道题目是在打家劫舍的题目上做了限制",{"2":{"20":1}}],["这道题目中我们不能偷相邻的两个房间",{"2":{"19":1}}],["这道题目也是一个滑动窗口相关的题目",{"2":{"16":1}}],["这道题目其实就是反转数组",{"2":{"15":1}}],["这道题目非常简单",{"2":{"14":1}}],["这道题目使用快慢指针",{"2":{"14":1}}],["这道题目使用双指针从前后遍历就可以了",{"2":{"11":1}}],["这道题目使用常规的二分查找即可得到结果",{"2":{"4":1}}],["这道题目一般的解法是使用一个map去储存每个元素和每个元素的互补数",{"2":{"9":1}}],["这里的初始化逻辑使用了usecreation",{"2":{"64":1}}],["这里每个需要缓存的userequest都会设置一个唯一的key",{"2":{"64":1}}],["这里内部使用了cache",{"2":{"64":1}}],["这里改写原函数",{"2":{"62":1}}],["这里为什么还要再判断一次呢",{"2":{"49":1}}],["这里注意插件的onfinally执行之前又判断是一次是是否是最新的请求",{"2":{"49":1}}],["这里可能会返回缓存后的promise",{"2":{"49":1}}],["这里我们就明白了",{"2":{"64":1}}],["这里我们就明白了event参数可以是onbefore",{"2":{"48":1}}],["这里我们可以看到这个插件并没有在任何生命周期中做事情",{"2":{"61":1}}],["这里我们可以看出在组件挂载的时候如果我们的配置中manual为false时会自动执行一次run方法",{"2":{"43":1}}],["这里我们也就猜测到了一点",{"2":{"43":1}}],["这里我们详细看一下第四个参数",{"2":{"43":1}}],["这里用来记录自己工作以来的学习笔记",{"2":{"29":1}}],["这里说明一下思路",{"2":{"27":1}}],["这里使用双指针只是为了拓展思路",{"2":{"9":1}}],["这里使用双指针其实比使用map看起来还复杂一点",{"2":{"9":1}}],["这样的设计方式非常便于维护和扩展",{"2":{"66":1}}],["这样的话如果我们设置了在页面隐藏掉的时候需要停止轮询的话就可以通过将请求方法从数组中移除的方式来实现",{"2":{"59":1}}],["这样就实现了如果接口在loadingdelay之内响应定时器会被移除",{"2":{"58":1}}],["这样就达到了默认调用的功能",{"2":{"43":1}}],["这样就保证了始终能够获取到最新的状态",{"2":{"39":1}}],["这样",{"2":{"23":1}}],["这样看的话我们从第一个台阶",{"2":{"21":1}}],["这样我们会发现",{"2":{"20":1}}],["这样子非零数的顺序不会被打乱",{"2":{"14":1}}],["这就代表着我们不能同时偷第一个房间和最后一个房间",{"2":{"20":1}}],["这就需要我们在排序的时候记录一下每个元素的原始下标",{"2":{"9":1}}],["这个防抖的功能是基于lodash",{"2":{"62":1}}],["这个插件内部实现了设置缓存和获取缓存的两个方法",{"2":{"64":1}}],["这个插件是用来实现节流的功能等插件",{"2":{"63":1}}],["这个插件是可以延迟loading",{"2":{"58":1}}],["这个插件看名字就知道是实现了防抖的功能",{"2":{"62":1}}],["这个插件会在浏览器获取到焦点或者隐藏状态发生变化的时候重新发送请求",{"2":{"61":1}}],["这个插件用来处理缓存的",{"2":{"64":1}}],["这个插件用来轮询请求",{"2":{"59":1}}],["这个插件用于控制请求是否发出",{"2":{"60":1}}],["这个插件的作用是请求发送失败后进行错误重试",{"2":{"65":1}}],["这个插件的实现思路很简单",{"2":{"65":1}}],["这个插件的实现相比较前面几个插件而言会复杂一点",{"2":{"64":1}}],["这个插件的实现其实和usepollingplugin中的页面隐藏停止轮询的实现方式非常相似",{"2":{"61":1}}],["这个插件的设计非常的巧妙",{"2":{"59":1}}],["这个插件的源码整体思路还是比较简单的",{"2":{"59":1}}],["这个对象包含了一些插件的生命周期",{"2":{"56":1}}],["这个生命周期会返回我们的请求promise",{"2":{"49":1}}],["这个方法会记录当前是储存的第几次请求",{"2":{"49":1}}],["这个方法是构造方法里的第三个参数",{"2":{"47":1}}],["这个方法的作用是用来修改state中的状态的值",{"2":{"47":1}}],["这个hooks的源码相较而言比较多",{"2":{"41":1}}],["这个实现方式让我想到了单例模式",{"2":{"39":1}}],["这个时候如果我们在页面上点击",{"2":{"38":1}}],["这个时候我们需要把第二行的数据压入我们之前创建的数组",{"2":{"27":1}}],["这个例子中不管",{"2":{"28":1}}],["这个叫做",{"2":{"28":1}}],["这个按钮是一个dropdown",{"2":{"28":1}}],["这个数组为",{"2":{"27":1}}],["这个数组是排序之后进行旋转的",{"2":{"1":1}}],["这个思路我们就可以拆分成两个问题",{"2":{"26":1}}],["这个解法无疑是最简单的",{"2":{"9":1}}],["这会带来额外的时间和空间成本",{"2":{"0":1}}],["new",{"2":{"16":2,"23":2,"24":2,"25":1,"26":2,"27":3,"31":1,"43":1,"49":3,"62":1,"63":1,"64":5}}],["nextgreaterelements",{"2":{"25":1}}],["nextgreaterelement",{"2":{"24":1}}],["next===undefined",{"2":{"17":1}}],["next",{"2":{"7":4,"17":9}}],["now",{"2":{"49":1}}],["noop>",{"2":{"39":1}}],["not",{"2":{"14":1,"15":1,"39":1,"59":1,"64":1}}],["node",{"2":{"5":1,"8":1,"39":1}}],["nlogn",{"2":{"7":1}}],["null",{"2":{"5":4,"8":2,"17":1,"31":1}}],["num",{"2":{"3":4,"9":2}}],["nums2",{"2":{"24":7}}],["nums1",{"2":{"24":6}}],["nums",{"2":{"1":6,"4":5,"9":3,"12":16,"13":7,"14":7,"19":10,"20":14,"23":19,"25":11}}],["number>",{"2":{"59":1}}],["number",{"2":{"1":2,"2":1,"3":5,"4":3,"5":1,"8":1,"9":3,"10":2,"12":2,"13":3,"14":1,"16":1,"19":2,"20":2,"21":2,"22":2,"24":3,"25":2,"26":2,"27":4,"45":1,"61":1,"64":1}}],["n",{"2":{"0":1,"2":3,"3":3,"7":1,"19":4,"21":9,"23":2}}],["out",{"2":{"64":1}}],["originrunasync",{"2":{"62":4,"63":3}}],["occurs",{"2":{"59":1}}],["olddata",{"2":{"54":1}}],["oldpaginationparams",{"2":{"34":2}}],["onmutate这七个值",{"2":{"48":1}}],["onmutate",{"2":{"48":1,"54":1,"56":1,"64":1}}],["onfinally",{"2":{"48":2,"49":4,"56":1,"58":1,"59":1}}],["onerror",{"2":{"48":2,"49":2,"50":1,"56":2,"59":1,"65":1}}],["onsuccess",{"2":{"48":2,"49":2,"56":3,"59":1,"65":1}}],["onrequest",{"2":{"48":2,"49":1,"56":2}}],["onbefore",{"2":{"48":1,"49":2,"56":1,"58":1,"59":1,"60":1,"65":1}}],["oninit",{"2":{"43":2,"60":1}}],["oncancel",{"2":{"48":2,"51":1,"56":1,"58":1,"59":1,"62":1,"63":1,"65":1}}],["onclick=",{"2":{"38":4}}],["onclick",{"2":{"38":5}}],["onchange",{"2":{"37":1}}],["on",{"2":{"36":1}}],["ontablechange",{"2":{"34":1,"37":1}}],["options",{"2":{"33":1,"40":2,"42":3,"43":9,"46":3,"49":7,"50":1,"56":2,"60":3,"62":3,"63":4}}],["object",{"2":{"31":3,"43":1,"48":1,"64":2}}],["otherwise",{"2":{"3":1}}],["of",{"2":{"3":1,"16":1}}],["o",{"2":{"0":1,"7":2,"23":1}}],["30000",{"2":{"65":1}}],["3",{"2":{"0":1,"20":1,"21":2,"22":1,"23":29,"27":3,"31":2,"43":1,"47":1}}],["和滑动窗口大小为",{"2":{"23":1}}],["和",{"2":{"0":1,"15":1}}],["2的这两个元素就是我们第一次遍历没有查找到对应更大元素的元素",{"2":{"25":1}}],["2",{"2":{"0":1,"1":1,"2":1,"3":1,"4":1,"12":1,"19":4,"20":3,"21":5,"22":3,"23":21,"25":15,"27":4,"28":1,"31":1,"43":1,"47":1,"56":1,"65":1}}],["更新查找范围",{"2":{"0":1}}],["计算最大矩形面积为4",{"2":{"27":1}}],["计算最大矩形面积为6",{"2":{"27":1}}],["计算最大矩形面积为3",{"2":{"27":1}}],["计算数组中每个元素后面最近的一个更大元素",{"2":{"23":1}}],["计算查找区间的中间位置",{"2":{"0":1}}],["计算中间位置",{"2":{"0":1}}]],"serializationVersion":2}';export{e as default};
