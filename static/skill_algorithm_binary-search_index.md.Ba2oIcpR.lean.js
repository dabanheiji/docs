import{_ as a,c as t,o as n,j as e,a as r}from"./chunks/framework.BpgFjFSJ.js";const h=JSON.parse('{"title":"二分查找","description":"","frontmatter":{"title":"二分查找"},"headers":[],"relativePath":"skill/algorithm/binary-search/index.md","filePath":"skill/algorithm/binary-search/index.md"}'),i={name:"skill/algorithm/binary-search/index.md"};function s(o,l,d,c,p,m){return n(),t("div",null,l[0]||(l[0]=[e("h1",{id:"二分查找",tabindex:"-1"},[r("二分查找 "),e("a",{class:"header-anchor",href:"#二分查找","aria-label":'Permalink to "二分查找"'},"​")],-1),e("p",null,"二分法查找，也称折半查找，是一种常见的查找算法，通常应用于已经排序的数组中。二分法查找的基本思想是通过比较中间元素的值和目标元素的值，来确定目标元素可能出现的位置，然后根据比较结果缩小查找范围，最终找到目标元素或者确认目标元素不存在。",-1),e("p",null,"二分法查找的实现通常包括以下几个步骤：",-1),e("ol",null,[e("li",null,"确定查找范围：确定查找范围，通常是整个数组或者当前查找区间。"),e("li",null,"计算中间位置：计算查找区间的中间位置。"),e("li",null,"比较中间元素：比较中间元素的值和目标元素的值，如果相等则找到目标元素，否则根据比较结果缩小查找范围。"),e("li",null,"更新查找范围：根据比较结果更新查找范围，继续执行步骤 2 和 3，直到找到目标元素或者确认目标元素不存在。")],-1),e("p",null,"二分法查找的时间复杂度是 O(logN)，其中 N 表示数组中元素的个数，因此它比顺序查找和哈希查找等算法的时间复杂度更低，特别是在处理大规模数据时效果更加明显。二分法查找通常用于处理静态数据，如果数据经常发生变化，则需要重新排序，这会带来额外的时间和空间成本。",-1)]))}const f=a(i,[["render",s]]);export{h as __pageData,f as default};
